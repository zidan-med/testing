"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Fix https://github.com/DevExpress/testcafe/issues/4139 to get rid of Pinkie
const pinkie_1 = __importDefault(require("pinkie"));
const lodash_1 = require("lodash");
const get_callsite_1 = require("../../errors/get-callsite");
const client_function_builder_1 = __importDefault(require("../../client-functions/client-function-builder"));
const assertion_1 = __importDefault(require("./assertion"));
const delegated_api_1 = require("../../utils/delegated-api");
const warning_message_1 = __importDefault(require("../../notifications/warning-message"));
const get_browser_1 = __importDefault(require("../../utils/get-browser"));
const add_rendered_warning_1 = __importDefault(require("../../notifications/add-rendered-warning"));
const callsite_1 = require("../../utils/callsite");
const deprecated_1 = require("../../notifications/deprecated");
const actions_1 = require("../../test-run/commands/actions");
const browser_manipulation_1 = require("../../test-run/commands/browser-manipulation");
const observation_1 = require("../../test-run/commands/observation");
const assert_type_1 = __importDefault(require("../request-hooks/assert-type"));
const execution_context_1 = require("./execution-context");
const types_1 = require("../../client-functions/types");
const test_run_proxy_1 = __importDefault(require("../../services/compiler/test-run-proxy"));
const test_run_1 = require("../../errors/test-run");
const originalThen = pinkie_1.default.resolve().then;
let inDebug = false;
class TestController {
    constructor(testRun) {
        this._executionContext = null;
        this.testRun = testRun;
        this.executionChain = pinkie_1.default.resolve();
        this.warningLog = testRun.warningLog;
    }
    // NOTE: we track missing `awaits` by exposing a special custom Promise to user code.
    // Action or assertion is awaited if:
    // a)someone used `await` so Promise's `then` function executed
    // b)Promise chained by using one of the mixed-in controller methods
    //
    // In both scenarios, we check that callsite that produced Promise is equal to the one
    // that is currently missing await. This is required to workaround scenarios like this:
    //
    // var t2 = t.click('#btn1'); // <-- stores new callsiteWithoutAwait
    // await t2;                  // <-- callsiteWithoutAwait = null
    // t.click('#btn2');          // <-- stores new callsiteWithoutAwait
    // await t2.click('#btn3');   // <-- without check it will set callsiteWithoutAwait = null, so we will lost tracking
    _createExtendedPromise(promise, callsite) {
        const extendedPromise = promise.then(lodash_1.identity);
        const observedCallsites = this.testRun.observedCallsites;
        const markCallsiteAwaited = () => observedCallsites.callsitesWithoutAwait.delete(callsite);
        extendedPromise.then = function () {
            markCallsiteAwaited();
            return originalThen.apply(this, arguments);
        };
        delegated_api_1.delegateAPI(extendedPromise, TestController.API_LIST, {
            handler: this,
            proxyMethod: markCallsiteAwaited
        });
        return extendedPromise;
    }
    _enqueueTask(apiMethodName, createTaskExecutor) {
        const callsite = get_callsite_1.getCallsiteForMethod(apiMethodName);
        const executor = createTaskExecutor(callsite);
        this.executionChain.then = originalThen;
        this.executionChain = this.executionChain.then(executor);
        this.testRun.observedCallsites.callsitesWithoutAwait.add(callsite);
        this.executionChain = this._createExtendedPromise(this.executionChain, callsite);
        return this.executionChain;
    }
    _enqueueCommand(apiMethodName, CmdCtor, cmdArgs) {
        return this._enqueueTask(apiMethodName, callsite => {
            let command = null;
            try {
                command = new CmdCtor(cmdArgs, this.testRun);
            }
            catch (err) {
                err.callsite = callsite;
                throw err;
            }
            return () => {
                return this.testRun.executeAction(apiMethodName, command, callsite)
                    .catch(err => {
                    this.executionChain = pinkie_1.default.resolve();
                    throw err;
                });
            };
        });
    }
    _validateMultipleWindowCommand(apiMethodName) {
        const { disableMultipleWindows, browserConnection } = this.testRun;
        if (disableMultipleWindows)
            throw new test_run_1.MultipleWindowsModeIsDisabledError(apiMethodName);
        if (!browserConnection.activeWindowId)
            throw new test_run_1.MultipleWindowsModeIsNotAvailableInRemoteBrowserError(apiMethodName);
    }
    getExecutionContext() {
        if (!this._executionContext)
            this._executionContext = execution_context_1.createExecutionContext(this.testRun);
        return this._executionContext;
    }
    // API implementation
    // We need implementation methods to obtain correct callsites. If we use plain API
    // methods in chained wrappers then we will have callsite for the wrapped method
    // in this file instead of chained method callsite in user code.
    _ctx$getter() {
        return this.testRun.ctx;
    }
    _ctx$setter(val) {
        this.testRun.ctx = val;
        return this.testRun.ctx;
    }
    _fixtureCtx$getter() {
        return this.testRun.fixtureCtx;
    }
    _browser$getter() {
        return get_browser_1.default(this.testRun.browserConnection);
    }
    _dispatchEvent$(selector, eventName, options = {}) {
        return this._enqueueCommand('dispatchEvent', actions_1.DispatchEventCommand, { selector, eventName, options, relatedTarget: options.relatedTarget });
    }
    _click$(selector, options) {
        return this._enqueueCommand('click', actions_1.ClickCommand, { selector, options });
    }
    _rightClick$(selector, options) {
        return this._enqueueCommand('rightClick', actions_1.RightClickCommand, { selector, options });
    }
    _doubleClick$(selector, options) {
        return this._enqueueCommand('doubleClick', actions_1.DoubleClickCommand, { selector, options });
    }
    _hover$(selector, options) {
        return this._enqueueCommand('hover', actions_1.HoverCommand, { selector, options });
    }
    _drag$(selector, dragOffsetX, dragOffsetY, options) {
        return this._enqueueCommand('drag', actions_1.DragCommand, { selector, dragOffsetX, dragOffsetY, options });
    }
    _dragToElement$(selector, destinationSelector, options) {
        return this._enqueueCommand('dragToElement', actions_1.DragToElementCommand, { selector, destinationSelector, options });
    }
    _getSelectorForScroll(args) {
        const selector = typeof args[0] === 'string' || types_1.isSelector(args[0]) ? args[0] : null;
        if (selector)
            args.shift();
        else
            // NOTE: here we use document.scrollingElement for old Safari versions
            // document.documentElement does not work as expected on Mojave Safari 12.1/ High Sierra Safari 11.1
            // eslint-disable-next-line no-undef
            return () => document.scrollingElement || document.documentElement;
        return selector;
    }
    _getPosition(args) {
        const position = args.length === 1 && typeof args[0] === 'string' ? args[0] : null;
        if (position)
            args.shift();
        return position;
    }
    _scroll$(...args) {
        let position = this._getPosition(args);
        const selector = this._getSelectorForScroll(args);
        let x = void 0;
        let y = void 0;
        let options = void 0;
        if (typeof args[0] === 'string')
            [position, options] = args;
        if (typeof args[0] === 'number')
            [x, y, options] = args;
        return this._enqueueCommand('scroll', actions_1.ScrollCommand, { selector, x, y, position, options });
    }
    _scrollBy$(...args) {
        const selector = this._getSelectorForScroll(args);
        const [byX, byY, options] = args;
        return this._enqueueCommand('scrollBy', actions_1.ScrollByCommand, { selector, byX, byY, options });
    }
    _scrollIntoView$(selector, options) {
        return this._enqueueCommand('scrollIntoView', actions_1.ScrollIntoViewCommand, { selector, options });
    }
    _typeText$(selector, text, options) {
        return this._enqueueCommand('typeText', actions_1.TypeTextCommand, { selector, text, options });
    }
    _selectText$(selector, startPos, endPos, options) {
        return this._enqueueCommand('selectText', actions_1.SelectTextCommand, { selector, startPos, endPos, options });
    }
    _selectTextAreaContent$(selector, startLine, startPos, endLine, endPos, options) {
        return this._enqueueCommand('selectTextAreaContent', actions_1.SelectTextAreaContentCommand, {
            selector,
            startLine,
            startPos,
            endLine,
            endPos,
            options
        });
    }
    _selectEditableContent$(startSelector, endSelector, options) {
        return this._enqueueCommand('selectEditableContent', actions_1.SelectEditableContentCommand, {
            startSelector,
            endSelector,
            options
        });
    }
    _pressKey$(keys, options) {
        return this._enqueueCommand('pressKey', actions_1.PressKeyCommand, { keys, options });
    }
    _wait$(timeout) {
        return this._enqueueCommand('wait', observation_1.WaitCommand, { timeout });
    }
    _navigateTo$(url) {
        return this._enqueueCommand('navigateTo', actions_1.NavigateToCommand, { url });
    }
    _setFilesToUpload$(selector, filePath) {
        return this._enqueueCommand('setFilesToUpload', actions_1.SetFilesToUploadCommand, { selector, filePath });
    }
    _clearUpload$(selector) {
        return this._enqueueCommand('clearUpload', actions_1.ClearUploadCommand, { selector });
    }
    _takeScreenshot$(options) {
        if (options && typeof options !== 'object')
            options = { path: options };
        return this._enqueueCommand('takeScreenshot', browser_manipulation_1.TakeScreenshotCommand, options);
    }
    _takeElementScreenshot$(selector, ...args) {
        const commandArgs = { selector };
        if (args[1]) {
            commandArgs.path = args[0];
            commandArgs.options = args[1];
        }
        else if (typeof args[0] === 'object')
            commandArgs.options = args[0];
        else
            commandArgs.path = args[0];
        return this._enqueueCommand('takeElementScreenshot', browser_manipulation_1.TakeElementScreenshotCommand, commandArgs);
    }
    _resizeWindow$(width, height) {
        return this._enqueueCommand('resizeWindow', browser_manipulation_1.ResizeWindowCommand, { width, height });
    }
    _resizeWindowToFitDevice$(device, options) {
        return this._enqueueCommand('resizeWindowToFitDevice', browser_manipulation_1.ResizeWindowToFitDeviceCommand, { device, options });
    }
    _maximizeWindow$() {
        return this._enqueueCommand('maximizeWindow', browser_manipulation_1.MaximizeWindowCommand);
    }
    _switchToIframe$(selector) {
        return this._enqueueCommand('switchToIframe', actions_1.SwitchToIframeCommand, { selector });
    }
    _switchToMainWindow$() {
        return this._enqueueCommand('switchToMainWindow', actions_1.SwitchToMainWindowCommand);
    }
    _openWindow$(url) {
        const apiMethodName = 'openWindow';
        this._validateMultipleWindowCommand(apiMethodName);
        return this._enqueueCommand(apiMethodName, actions_1.OpenWindowCommand, { url });
    }
    _closeWindow$(window) {
        const apiMethodName = 'closeWindow';
        const windowId = (window === null || window === void 0 ? void 0 : window.id) || null;
        this._validateMultipleWindowCommand(apiMethodName);
        return this._enqueueCommand(apiMethodName, actions_1.CloseWindowCommand, { windowId });
    }
    _getCurrentWindow$() {
        const apiMethodName = 'getCurrentWindow';
        this._validateMultipleWindowCommand(apiMethodName);
        return this._enqueueCommand(apiMethodName, actions_1.GetCurrentWindowCommand);
    }
    _switchToWindow$(windowSelector) {
        const apiMethodName = 'switchToWindow';
        this._validateMultipleWindowCommand(apiMethodName);
        let command;
        let args;
        if (typeof windowSelector === 'function') {
            command = actions_1.SwitchToWindowByPredicateCommand;
            args = { findWindow: windowSelector };
        }
        else {
            command = actions_1.SwitchToWindowCommand;
            args = { windowId: windowSelector === null || windowSelector === void 0 ? void 0 : windowSelector.id };
        }
        return this._enqueueCommand(apiMethodName, command, args);
    }
    _switchToParentWindow$() {
        const apiMethodName = 'switchToParentWindow';
        this._validateMultipleWindowCommand(apiMethodName);
        return this._enqueueCommand(apiMethodName, actions_1.SwitchToParentWindowCommand);
    }
    _switchToPreviousWindow$() {
        const apiMethodName = 'switchToPreviousWindow';
        this._validateMultipleWindowCommand(apiMethodName);
        return this._enqueueCommand(apiMethodName, actions_1.SwitchToPreviousWindowCommand);
    }
    _eval$(fn, options) {
        if (!lodash_1.isNil(options))
            options = lodash_1.assign({}, options, { boundTestRun: this });
        const builder = new client_function_builder_1.default(fn, options, { instantiation: 'eval', execution: 'eval' });
        const clientFn = builder.getFunction();
        return clientFn();
    }
    _setNativeDialogHandler$(fn, options) {
        return this._enqueueCommand('setNativeDialogHandler', actions_1.SetNativeDialogHandlerCommand, {
            dialogHandler: { fn, options }
        });
    }
    _getNativeDialogHistory$() {
        const name = 'getNativeDialogHistory';
        const callsite = get_callsite_1.getCallsiteForMethod(name);
        return this.testRun.executeAction(name, new actions_1.GetNativeDialogHistoryCommand(), callsite);
    }
    _getBrowserConsoleMessages$() {
        const name = 'getBrowserConsoleMessages';
        const callsite = get_callsite_1.getCallsiteForMethod(name);
        return this.testRun.executeAction(name, new actions_1.GetBrowserConsoleMessagesCommand(), callsite);
    }
    _checkForExcessiveAwaits(snapshotPropertyCallsites, checkedCallsite) {
        const callsiteId = callsite_1.getCallsiteId(checkedCallsite);
        // NOTE: If there are unasserted callsites, we should add all of them to awaitedSnapshotWarnings.
        // The warnings themselves are raised after the test run in wrap-test-function
        if (snapshotPropertyCallsites[callsiteId] && !snapshotPropertyCallsites[callsiteId].checked) {
            for (const propertyCallsite of snapshotPropertyCallsites[callsiteId].callsites)
                this.testRun.observedCallsites.awaitedSnapshotWarnings.set(callsite_1.getCallsiteStackFrameString(propertyCallsite), propertyCallsite);
            delete snapshotPropertyCallsites[callsiteId];
        }
        else
            snapshotPropertyCallsites[callsiteId] = { callsites: [], checked: true };
    }
    _expect$(actual) {
        const callsite = get_callsite_1.getCallsiteForMethod('expect');
        this._checkForExcessiveAwaits(this.testRun.observedCallsites.snapshotPropertyCallsites, callsite);
        if (types_1.isClientFunction(actual))
            add_rendered_warning_1.default(this.warningLog, warning_message_1.default.assertedClientFunctionInstance, callsite);
        else if (types_1.isSelector(actual))
            add_rendered_warning_1.default(this.warningLog, warning_message_1.default.assertedSelectorInstance, callsite);
        return new assertion_1.default(actual, this, callsite);
    }
    _debug$() {
        // NOTE: do not need to enqueue the Debug command if we are in compiler service debugging mode
        // the Debug command will be executed by CDP
        return this.isCompilerServiceMode() ? void 0 : this._enqueueCommand('debug', observation_1.DebugCommand);
    }
    _setTestSpeed$(speed) {
        return this._enqueueCommand('setTestSpeed', actions_1.SetTestSpeedCommand, { speed });
    }
    _setPageLoadTimeout$(duration) {
        add_rendered_warning_1.default(this.warningLog, deprecated_1.getDeprecationMessage(deprecated_1.DEPRECATED.setPageLoadTimeout));
        return this._enqueueCommand('setPageLoadTimeout', actions_1.SetPageLoadTimeoutCommand, { duration });
    }
    _useRole$(role) {
        return this._enqueueCommand('useRole', actions_1.UseRoleCommand, { role });
    }
    _addRequestHooks$(...hooks) {
        return this._enqueueTask('addRequestHooks', () => {
            hooks = lodash_1.flattenDeep(hooks);
            assert_type_1.default(hooks);
            hooks.forEach(hook => this.testRun.addRequestHook(hook));
        });
    }
    _removeRequestHooks$(...hooks) {
        return this._enqueueTask('removeRequestHooks', () => {
            hooks = lodash_1.flattenDeep(hooks);
            assert_type_1.default(hooks);
            hooks.forEach(hook => this.testRun.removeRequestHook(hook));
        });
    }
    static enableDebugForNonDebugCommands() {
        inDebug = true;
    }
    static disableDebugForNonDebugCommands() {
        inDebug = false;
    }
    shouldStop(command) {
        // NOTE: should never stop in not compliler debugging mode
        if (!this.isCompilerServiceMode())
            return false;
        // NOTE: should always stop on Debug command
        if (command === 'debug')
            return true;
        // NOTE: should stop on other actions after the `Next Action` button is clicked
        if (inDebug) {
            inDebug = false;
            return true;
        }
        return false;
    }
    isCompilerServiceMode() {
        return this.testRun instanceof test_run_proxy_1.default;
    }
}
exports.default = TestController;
TestController.API_LIST = delegated_api_1.getDelegatedAPIList(TestController.prototype);
delegated_api_1.delegateAPI(TestController.prototype, TestController.API_LIST, { useCurrentCtxAsHandler: true });
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,