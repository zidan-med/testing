"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAPI = exports.addCustomMethods = void 0;
const util_1 = require("util");
const lodash_1 = require("lodash");
const builder_symbol_1 = __importDefault(require("../builder-symbol"));
const snapshot_properties_1 = require("./snapshot-properties");
const get_callsite_1 = require("../../errors/get-callsite");
const client_function_builder_1 = __importDefault(require("../client-function-builder"));
const re_executable_promise_1 = __importDefault(require("../../utils/re-executable-promise"));
const type_assertions_1 = require("../../errors/runtime/type-assertions");
const make_reg_exp_1 = __importDefault(require("../../utils/make-reg-exp"));
const selector_text_filter_1 = __importDefault(require("./selector-text-filter"));
const selector_attribute_filter_1 = __importDefault(require("./selector-attribute-filter"));
const prepare_api_args_1 = __importDefault(require("./prepare-api-args"));
const callsite_1 = require("../../utils/callsite");
const selector_api_execution_mode_1 = __importDefault(require("../selector-api-execution-mode"));
const VISIBLE_PROP_NAME = 'visible';
const SNAPSHOT_PROP_PRIMITIVE = `[object ${re_executable_promise_1.default.name}]`;
const filterNodes = (new client_function_builder_1.default((nodes, filter, querySelectorRoot, originNode, ...filterArgs) => {
    if (typeof filter === 'number') {
        const matchingNode = filter < 0 ? nodes[nodes.length + filter] : nodes[filter];
        return matchingNode ? [matchingNode] : [];
    }
    const result = [];
    if (typeof filter === 'string') {
        // NOTE: we can search for elements only in document/element/shadow root.
        if (querySelectorRoot.nodeType !== 1 && querySelectorRoot.nodeType !== 9 && querySelectorRoot.nodeType !== 11)
            return null;
        const matching = querySelectorRoot.querySelectorAll(filter);
        const matchingArr = [];
        for (let i = 0; i < matching.length; i++)
            matchingArr.push(matching[i]);
        filter = node => matchingArr.indexOf(node) > -1;
    }
    if (typeof filter === 'function') {
        for (let j = 0; j < nodes.length; j++) {
            if (filter(nodes[j], j, originNode, ...filterArgs))
                result.push(nodes[j]);
        }
    }
    return result;
})).getFunction();
const expandSelectorResults = (new client_function_builder_1.default((selector, populateDerivativeNodes) => {
    const nodes = selector();
    if (!nodes.length)
        return null;
    const result = [];
    for (let i = 0; i < nodes.length; i++) {
        const derivativeNodes = populateDerivativeNodes(nodes[i]);
        if (derivativeNodes) {
            for (let j = 0; j < derivativeNodes.length; j++) {
                if (result.indexOf(derivativeNodes[j]) < 0)
                    result.push(derivativeNodes[j]);
            }
        }
    }
    return result;
})).getFunction();
async function getSnapshot(getSelector, callsite, SelectorBuilder, getVisibleValueMode) {
    let node = null;
    const selector = new SelectorBuilder(getSelector(), { getVisibleValueMode, needError: true }, { instantiation: 'Selector' }, callsite).getFunction();
    try {
        node = await selector();
    }
    catch (err) {
        err.callsite = callsite;
        throw err;
    }
    return node;
}
function getSnapshotSync(getSelector, callsite, SelectorBuilder, getVisibleValueMode) {
    let node = null;
    const selector = new SelectorBuilder(getSelector(), { getVisibleValueMode, needError: true }, { instantiation: 'Selector' }, callsite).getFunction();
    try {
        node = selector();
    }
    catch (err) {
        err.callsite = callsite;
        throw err;
    }
    return node;
}
function assertAddCustomDOMPropertiesOptions(properties) {
    type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'addCustomDOMProperties', 'The "addCustomDOMProperties" option', properties);
    Object.keys(properties).forEach(prop => {
        type_assertions_1.assertType(type_assertions_1.is.function, 'addCustomDOMProperties', `The custom DOM properties method '${prop}'`, properties[prop]);
    });
}
function assertAddCustomMethods(properties, opts) {
    type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'addCustomMethods', 'The "addCustomMethods" option', properties);
    if (opts !== void 0)
        type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'addCustomMethods', 'The "addCustomMethods" option', opts);
    Object.keys(properties).forEach(prop => {
        type_assertions_1.assertType(type_assertions_1.is.function, 'addCustomMethods', `The custom method '${prop}'`, properties[prop]);
    });
}
function getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, additionalDependencies) {
    return Object.assign({}, options, { selectorFn, apiFn, filter, additionalDependencies });
}
function createPrimitiveGetterWrapper(observedCallsites, callsite) {
    return (depth, options) => {
        const isTestCafeInspect = options === null || options === void 0 ? void 0 : options.isTestCafeInspect;
        if (observedCallsites && !isTestCafeInspect)
            observedCallsites.unawaitedSnapshotCallsites.add(callsite);
        return SNAPSHOT_PROP_PRIMITIVE;
    };
}
function checkForExcessiveAwaits(snapshotPropertyCallsites, checkedCallsite) {
    const callsiteId = callsite_1.getCallsiteId(checkedCallsite);
    // NOTE: If there is an asserted callsite, it means that .expect() was already called.
    // We don't raise a warning and delete the callsite.
    if (snapshotPropertyCallsites[callsiteId] && snapshotPropertyCallsites[callsiteId].checked)
        delete snapshotPropertyCallsites[callsiteId];
    // NOTE: If the calliste already exists, but is not asserted, it means that there are
    // multiple awaited callsites in one assertion. We raise a warning for each of them.
    else if (snapshotPropertyCallsites[callsiteId] && !snapshotPropertyCallsites[callsiteId].checked)
        snapshotPropertyCallsites[callsiteId].callsites.push(checkedCallsite);
    else
        snapshotPropertyCallsites[callsiteId] = { callsites: [checkedCallsite], checked: false };
}
function addSnapshotProperties(obj, getSelector, SelectorBuilder, properties, observedCallsites) {
    properties.forEach(prop => {
        Object.defineProperty(obj, prop, {
            get: () => {
                const callsite = get_callsite_1.getCallsiteForMethod('get');
                if (selector_api_execution_mode_1.default.isSync)
                    return getSnapshotSync(getSelector, callsite, SelectorBuilder)[prop];
                const propertyPromise = re_executable_promise_1.default.fromFn(async () => {
                    const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder);
                    return snapshot[prop];
                });
                const primitiveGetterWrapper = createPrimitiveGetterWrapper(observedCallsites, callsite);
                propertyPromise[Symbol.toPrimitive] = primitiveGetterWrapper;
                propertyPromise[util_1.inspect.custom] = primitiveGetterWrapper;
                propertyPromise.then = function (onFulfilled, onRejected) {
                    if (observedCallsites)
                        checkForExcessiveAwaits(observedCallsites.snapshotPropertyCallsites, callsite);
                    this._ensureExecuting();
                    return this._taskPromise.then(onFulfilled, onRejected);
                };
                return propertyPromise;
            }
        });
    });
}
function addVisibleProperty({ obj, getSelector, SelectorBuilder }) {
    Object.defineProperty(obj, VISIBLE_PROP_NAME, {
        get: () => {
            const callsite = get_callsite_1.getCallsiteForMethod('get');
            if (selector_api_execution_mode_1.default.isSync) {
                const snapshot = getSnapshotSync(getSelector, callsite, SelectorBuilder, true);
                return !!snapshot && snapshot[VISIBLE_PROP_NAME];
            }
            return re_executable_promise_1.default.fromFn(async () => {
                const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder, true);
                return !!snapshot && snapshot[VISIBLE_PROP_NAME];
            });
        }
    });
}
function addCustomMethods(obj, getSelector, SelectorBuilder, customMethods) {
    const customMethodProps = customMethods ? Object.keys(customMethods) : [];
    customMethodProps.forEach(prop => {
        const { returnDOMNodes = false, method } = customMethods[prop];
        const dependencies = {
            customMethod: method,
            selector: getSelector()
        };
        const callsiteNames = { instantiation: prop };
        if (returnDOMNodes) {
            obj[prop] = (...args) => {
                const selectorFn = () => {
                    /* eslint-disable no-undef */
                    const nodes = selector();
                    return customMethod.apply(customMethod, [nodes].concat(args));
                    /* eslint-enable no-undef */
                };
                const apiFn = prepare_api_args_1.default(prop, ...args);
                const filter = () => true;
                const additionalDependencies = {
                    args,
                    customMethod: method
                };
                return createDerivativeSelectorWithFilter({ getSelector, SelectorBuilder, selectorFn, apiFn, filter, additionalDependencies });
            };
        }
        else {
            obj[prop] = (new client_function_builder_1.default((...args) => {
                /* eslint-disable no-undef */
                const node = selector();
                return customMethod.apply(customMethod, [node].concat(args));
                /* eslint-enable no-undef */
            }, { dependencies }, callsiteNames)).getFunction();
        }
    });
}
exports.addCustomMethods = addCustomMethods;
function prepareSnapshotPropertyList(customDOMProperties) {
    let properties = [...snapshot_properties_1.SNAPSHOT_PROPERTIES];
    // NOTE: The 'visible' snapshot property has a separate handler.
    lodash_1.pull(properties, VISIBLE_PROP_NAME);
    if (customDOMProperties)
        properties = properties.concat(Object.keys(customDOMProperties));
    return properties;
}
function addSnapshotPropertyShorthands({ obj, getSelector, SelectorBuilder, customDOMProperties, customMethods, observedCallsites }) {
    const properties = prepareSnapshotPropertyList(customDOMProperties);
    addSnapshotProperties(obj, getSelector, SelectorBuilder, properties, observedCallsites);
    addCustomMethods(obj, getSelector, SelectorBuilder, customMethods);
    obj.getStyleProperty = prop => {
        const callsite = get_callsite_1.getCallsiteForMethod('getStyleProperty');
        if (selector_api_execution_mode_1.default.isSync) {
            const snapshot = getSnapshotSync(getSelector, callsite, SelectorBuilder);
            return snapshot.style ? snapshot.style[prop] : void 0;
        }
        return re_executable_promise_1.default.fromFn(async () => {
            const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder);
            return snapshot.style ? snapshot.style[prop] : void 0;
        });
    };
    obj.getAttribute = attrName => {
        const callsite = get_callsite_1.getCallsiteForMethod('getAttribute');
        if (selector_api_execution_mode_1.default.isSync) {
            const snapshot = getSnapshotSync(getSelector, callsite, SelectorBuilder);
            return snapshot.attributes ? snapshot.attributes[attrName] : void 0;
        }
        return re_executable_promise_1.default.fromFn(async () => {
            const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder);
            return snapshot.attributes ? snapshot.attributes[attrName] : void 0;
        });
    };
    obj.hasAttribute = attrName => {
        const callsite = get_callsite_1.getCallsiteForMethod('hasAttribute');
        if (selector_api_execution_mode_1.default.isSync) {
            const snapshot = getSnapshotSync(getSelector, callsite, SelectorBuilder);
            return snapshot.attributes ? snapshot.attributes.hasOwnProperty(attrName) : false;
        }
        return re_executable_promise_1.default.fromFn(async () => {
            const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder);
            return snapshot.attributes ? snapshot.attributes.hasOwnProperty(attrName) : false;
        });
    };
    obj.getBoundingClientRectProperty = prop => {
        const callsite = get_callsite_1.getCallsiteForMethod('getBoundingClientRectProperty');
        if (selector_api_execution_mode_1.default.isSync) {
            const snapshot = getSnapshotSync(getSelector, callsite, SelectorBuilder);
            return snapshot.boundingClientRect ? snapshot.boundingClientRect[prop] : void 0;
        }
        return re_executable_promise_1.default.fromFn(async () => {
            const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder);
            return snapshot.boundingClientRect ? snapshot.boundingClientRect[prop] : void 0;
        });
    };
    obj.hasClass = name => {
        const callsite = get_callsite_1.getCallsiteForMethod('hasClass');
        if (selector_api_execution_mode_1.default.isSync) {
            const snapshot = getSnapshotSync(getSelector, callsite, SelectorBuilder);
            return snapshot.classNames ? snapshot.classNames.includes(name) : false;
        }
        return re_executable_promise_1.default.fromFn(async () => {
            const snapshot = await getSnapshot(getSelector, callsite, SelectorBuilder);
            return snapshot.classNames ? snapshot.classNames.includes(name) : false;
        });
    };
}
function createCounter(getSelector, SelectorBuilder) {
    const builder = new SelectorBuilder(getSelector(), { counterMode: true }, { instantiation: 'Selector' });
    const counter = builder.getFunction();
    const callsite = get_callsite_1.getCallsiteForMethod('get');
    return async () => {
        try {
            return await counter();
        }
        catch (err) {
            err.callsite = callsite;
            throw err;
        }
    };
}
function createCounterSync(getSelector, SelectorBuilder) {
    const builder = new SelectorBuilder(getSelector(), { counterMode: true }, { instantiation: 'Selector' });
    const counter = builder.getFunction();
    const callsite = get_callsite_1.getCallsiteForMethod('get');
    return () => {
        try {
            return counter();
        }
        catch (err) {
            err.callsite = callsite;
            throw err;
        }
    };
}
function addCounterProperties({ obj, getSelector, SelectorBuilder }) {
    Object.defineProperty(obj, 'count', {
        get: () => {
            if (selector_api_execution_mode_1.default.isSync)
                return createCounterSync(getSelector, SelectorBuilder)();
            const counter = createCounter(getSelector, SelectorBuilder);
            return re_executable_promise_1.default.fromFn(() => counter());
        }
    });
    Object.defineProperty(obj, 'exists', {
        get: () => {
            if (selector_api_execution_mode_1.default.isSync)
                return createCounterSync(getSelector, SelectorBuilder)() > 0;
            const counter = createCounter(getSelector, SelectorBuilder);
            return re_executable_promise_1.default.fromFn(async () => await counter() > 0);
        }
    });
}
function convertFilterToClientFunctionIfNecessary(callsiteName, filter, dependencies) {
    if (typeof filter === 'function') {
        const builder = filter[builder_symbol_1.default];
        const fn = builder ? builder.fn : filter;
        const options = builder ? lodash_1.assign({}, builder.options, { dependencies }) : { dependencies };
        return (new client_function_builder_1.default(fn, options, { instantiation: callsiteName })).getFunction();
    }
    return filter;
}
function createDerivativeSelectorWithFilter({ getSelector, SelectorBuilder, selectorFn, apiFn, filter, additionalDependencies }) {
    const collectionModeSelectorBuilder = new SelectorBuilder(getSelector(), { collectionMode: true });
    const customDOMProperties = collectionModeSelectorBuilder.options.customDOMProperties;
    const customMethods = collectionModeSelectorBuilder.options.customMethods;
    let dependencies = {
        selector: collectionModeSelectorBuilder.getFunction(),
        filter: filter,
        filterNodes: filterNodes
    };
    const { boundTestRun, timeout, visibilityCheck, apiFnChain } = collectionModeSelectorBuilder.options;
    dependencies = lodash_1.assign(dependencies, additionalDependencies);
    const builder = new SelectorBuilder(selectorFn, {
        dependencies,
        customDOMProperties,
        customMethods,
        boundTestRun,
        timeout,
        visibilityCheck,
        apiFnChain,
        apiFn
    }, { instantiation: 'Selector' });
    return builder.getFunction();
}
const filterByText = convertFilterToClientFunctionIfNecessary('filter', selector_text_filter_1.default);
const filterByAttr = convertFilterToClientFunctionIfNecessary('filter', selector_attribute_filter_1.default);
function ensureRegExpContext(str) {
    // NOTE: if a regexp is created in a separate context (via the 'vm' module) we
    // should wrap it with new RegExp() to make the `instanceof RegExp` check successful.
    if (typeof str !== 'string' && !(str instanceof RegExp))
        return new RegExp(str);
    return str;
}
function addFilterMethods(options) {
    const { obj, getSelector, SelectorBuilder } = options;
    obj.nth = index => {
        type_assertions_1.assertType(type_assertions_1.is.number, 'nth', 'The "index" argument', index);
        const apiFn = prepare_api_args_1.default('nth', index);
        const builder = new SelectorBuilder(getSelector(), { index, apiFn }, { instantiation: 'Selector' });
        return builder.getFunction();
    };
    obj.withText = text => {
        type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.regExp], 'withText', 'The "text" argument', text);
        const apiFn = prepare_api_args_1.default('withText', text);
        text = ensureRegExpContext(text);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            const nodes = selector();
            if (!nodes.length)
                return null;
            return filterNodes(nodes, filter, document, void 0, textRe);
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filterByText, { textRe: make_reg_exp_1.default(text) });
        return createDerivativeSelectorWithFilter(args);
    };
    obj.withExactText = text => {
        type_assertions_1.assertType(type_assertions_1.is.string, 'withExactText', 'The "text" argument', text);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            const nodes = selector();
            if (!nodes.length)
                return null;
            return filterNodes(nodes, filter, document, void 0, exactText);
            /* eslint-enable no-undef */
        };
        const apiFn = prepare_api_args_1.default('withExactText', text);
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filterByText, { exactText: text });
        return createDerivativeSelectorWithFilter(args);
    };
    obj.withAttribute = (attrName, attrValue) => {
        type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.regExp], 'withAttribute', 'The "attrName" argument', attrName);
        const apiFn = prepare_api_args_1.default('withAttribute', attrName, attrValue);
        attrName = ensureRegExpContext(attrName);
        if (attrValue !== void 0) {
            type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.regExp], 'withAttribute', 'The "attrValue" argument', attrValue);
            attrValue = ensureRegExpContext(attrValue);
        }
        const selectorFn = () => {
            /* eslint-disable no-undef */
            const nodes = selector();
            if (!nodes.length)
                return null;
            return filterNodes(nodes, filter, document, void 0, attrName, attrValue);
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filterByAttr, {
            attrName,
            attrValue
        });
        return createDerivativeSelectorWithFilter(args);
    };
    obj.filter = (filter, dependencies) => {
        type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function], 'filter', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('filter', filter);
        filter = convertFilterToClientFunctionIfNecessary('filter', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            const nodes = selector();
            if (!nodes.length)
                return null;
            return filterNodes(nodes, filter, document, void 0);
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter);
        return createDerivativeSelectorWithFilter(args);
    };
    obj.filterVisible = () => {
        const apiFn = prepare_api_args_1.default('filterVisible');
        const builder = new SelectorBuilder(getSelector(), { filterVisible: true, apiFn }, { instantiation: 'Selector' });
        return builder.getFunction();
    };
    obj.filterHidden = () => {
        const apiFn = prepare_api_args_1.default('filterHidden');
        const builder = new SelectorBuilder(getSelector(), { filterHidden: true, apiFn }, { instantiation: 'Selector' });
        return builder.getFunction();
    };
}
function addCustomDOMPropertiesMethod({ obj, getSelector, SelectorBuilder }) {
    obj.addCustomDOMProperties = customDOMProperties => {
        assertAddCustomDOMPropertiesOptions(customDOMProperties);
        const builder = new SelectorBuilder(getSelector(), { customDOMProperties }, { instantiation: 'Selector' });
        return builder.getFunction();
    };
}
function addCustomMethodsMethod({ obj, getSelector, SelectorBuilder }) {
    obj.addCustomMethods = function (methods, opts) {
        assertAddCustomMethods(methods, opts);
        const customMethods = {};
        Object.keys(methods).forEach(methodName => {
            customMethods[methodName] = {
                method: methods[methodName],
                returnDOMNodes: opts && !!opts.returnDOMNodes
            };
        });
        const builder = new SelectorBuilder(getSelector(), { customMethods }, { instantiation: 'Selector' });
        return builder.getFunction();
    };
}
function addHierarchicalSelectors(options) {
    const { obj } = options;
    // Find
    obj.find = (filter, dependencies) => {
        type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function], 'find', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('find', filter);
        filter = convertFilterToClientFunctionIfNecessary('find', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                if (typeof filter === 'string') {
                    return typeof node.querySelectorAll === 'function' ?
                        node.querySelectorAll(filter) :
                        null;
                }
                const results = [];
                const visitNode = currentNode => {
                    const cnLength = currentNode.childNodes.length;
                    for (let i = 0; i < cnLength; i++) {
                        const child = currentNode.childNodes[i];
                        results.push(child);
                        visitNode(child);
                    }
                };
                visitNode(node);
                return filterNodes(results, filter, null, node);
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
    // Parent
    obj.parent = (filter, dependencies) => {
        if (filter !== void 0)
            type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function, type_assertions_1.is.number], 'parent', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('parent', filter);
        filter = convertFilterToClientFunctionIfNecessary('find', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                const parents = [];
                for (let parent = node.parentNode; parent; parent = parent.parentNode)
                    parents.push(parent);
                return filter !== void 0 ? filterNodes(parents, filter, document, node) : parents;
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
    // Child
    obj.child = (filter, dependencies) => {
        if (filter !== void 0)
            type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function, type_assertions_1.is.number], 'child', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('child', filter);
        filter = convertFilterToClientFunctionIfNecessary('find', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                const childElements = [];
                const cnLength = node.childNodes.length;
                for (let i = 0; i < cnLength; i++) {
                    const child = node.childNodes[i];
                    if (child.nodeType === 1)
                        childElements.push(child);
                }
                return filter !== void 0 ? filterNodes(childElements, filter, node, node) : childElements;
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
    // Sibling
    obj.sibling = (filter, dependencies) => {
        if (filter !== void 0)
            type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function, type_assertions_1.is.number], 'sibling', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('sibling', filter);
        filter = convertFilterToClientFunctionIfNecessary('find', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                const parent = node.parentNode;
                if (!parent)
                    return null;
                const siblings = [];
                const cnLength = parent.childNodes.length;
                for (let i = 0; i < cnLength; i++) {
                    const child = parent.childNodes[i];
                    if (child.nodeType === 1 && child !== node)
                        siblings.push(child);
                }
                return filter !== void 0 ? filterNodes(siblings, filter, parent, node) : siblings;
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
    // Next sibling
    obj.nextSibling = (filter, dependencies) => {
        if (filter !== void 0)
            type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function, type_assertions_1.is.number], 'nextSibling', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('nextSibling', filter);
        filter = convertFilterToClientFunctionIfNecessary('find', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                const parent = node.parentNode;
                if (!parent)
                    return null;
                const siblings = [];
                const cnLength = parent.childNodes.length;
                let afterNode = false;
                for (let i = 0; i < cnLength; i++) {
                    const child = parent.childNodes[i];
                    if (child === node)
                        afterNode = true;
                    else if (afterNode && child.nodeType === 1)
                        siblings.push(child);
                }
                return filter !== void 0 ? filterNodes(siblings, filter, parent, node) : siblings;
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
    // Prev sibling
    obj.prevSibling = (filter, dependencies) => {
        if (filter !== void 0)
            type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.function, type_assertions_1.is.number], 'prevSibling', 'The "filter" argument', filter);
        const apiFn = prepare_api_args_1.default('prevSibling', filter);
        filter = convertFilterToClientFunctionIfNecessary('find', filter, dependencies);
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                const parent = node.parentNode;
                if (!parent)
                    return null;
                const siblings = [];
                const cnLength = parent.childNodes.length;
                for (let i = 0; i < cnLength; i++) {
                    const child = parent.childNodes[i];
                    if (child === node)
                        break;
                    if (child.nodeType === 1)
                        siblings.push(child);
                }
                return filter !== void 0 ? filterNodes(siblings, filter, parent, node) : siblings;
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, filter, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
    // ShadowRoot
    obj.shadowRoot = () => {
        const apiFn = prepare_api_args_1.default('shadowRoot');
        const selectorFn = () => {
            /* eslint-disable no-undef */
            return expandSelectorResults(selector, node => {
                return !node.shadowRoot ? null : [node.shadowRoot];
            });
            /* eslint-enable no-undef */
        };
        const args = getDerivativeSelectorArgs(options, selectorFn, apiFn, void 0, { expandSelectorResults });
        return createDerivativeSelectorWithFilter(args);
    };
}
function addAPI(selector, getSelector, SelectorBuilder, customDOMProperties, customMethods, observedCallsites, skipSnapshotProperties) {
    const options = { obj: selector, getSelector, SelectorBuilder, customDOMProperties, customMethods, observedCallsites };
    addFilterMethods(options);
    addHierarchicalSelectors(options);
    if (!skipSnapshotProperties)
        addSnapshotPropertyShorthands(options);
    addCustomDOMPropertiesMethod(options);
    addCustomMethodsMethod(options);
    addCounterProperties(options);
    addVisibleProperty(options);
}
exports.addAPI = addAPI;
//# sourceMappingURL=data:application/json;base64,