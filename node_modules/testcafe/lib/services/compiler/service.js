"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const compiler_1 = __importDefault(require("../../compiler"));
const test_run_proxy_1 = __importDefault(require("./test-run-proxy"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const test_structure_1 = require("../serialization/test-structure");
const io_1 = require("./io");
const proxy_1 = require("../utils/ipc/proxy");
const transport_1 = require("../utils/ipc/transport");
const source_map_support_1 = __importDefault(require("source-map-support"));
const protocol_1 = require("./protocol");
const process_title_1 = __importDefault(require("../process-title"));
const hook_method_names_1 = __importDefault(require("../../api/request-hooks/hook-method-names"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
source_map_support_1.default.install({
    hookRequire: true,
    handleUncaughtExceptions: false,
    environment: 'node'
});
class CompilerService {
    constructor() {
        process.title = process_title_1.default.service;
        const input = fs_1.default.createReadStream('', { fd: io_1.SERVICE_INPUT_FD });
        const output = fs_1.default.createWriteStream('', { fd: io_1.SERVICE_OUTPUT_FD });
        this.proxy = new proxy_1.IPCProxy(new transport_1.ServiceTransport(input, output, io_1.SERVICE_SYNC_FD));
        this.state = this._initState();
        this._setupRoutes();
        this.ready();
    }
    _initState() {
        return {
            testRuns: {},
            fixtureCtxs: {},
            units: {},
            options: {}
        };
    }
    _getFixtureCtx(unit) {
        const fixtureId = test_structure_1.isTest(unit) ? unit.fixture.id : unit.id;
        return this.state.fixtureCtxs[fixtureId];
    }
    _getTestCtx({ testRunId }, unit) {
        const testRunProxy = this.state.testRuns[testRunId];
        testRunProxy.fixtureCtx = this._getFixtureCtx(unit);
        return testRunProxy;
    }
    _getContext(args, unit) {
        const { testRunId } = args;
        if (testRunId)
            return this._getTestCtx(args, unit);
        return this._getFixtureCtx(unit);
    }
    _setupRoutes() {
        this.proxy.register([
            this.getTests,
            this.runTestFn,
            this.cleanUp,
            this.setOptions,
            this.onRequestHookEvent,
            this.setMock,
            this.setConfigureResponseEventOptions,
            this.setHeaderOnConfigureResponseEvent,
            this.removeHeaderOnConfigureResponseEvent,
            this.executeRequestFilterRulePredicate,
            this.executeMockPredicate,
            this.getWarningMessages,
            this.addRequestEventListeners,
            this.removeRequestEventListeners,
            this.initializeTestRunData,
            this.getCurrentUrl,
            this.getStateSnapshot,
            this.useStateSnapshot,
            this.getTestRunPhase,
            this.setTestRunPhase,
            this.getActiveDialogHandler,
            this.getActiveIframeSelector,
            this.getSpeed,
            this.getPageLoadTimeout,
            this.setBrowserConsoleMessages,
            this.getBrowserConsoleMessages
        ], this);
    }
    _getFunction(unit, functionName) {
        if (test_structure_1.isTest(unit) && protocol_1.isTestFunctionProperty(functionName))
            return unit[functionName];
        if (test_structure_1.isFixture(unit) && protocol_1.isFixtureFunctionProperty(functionName))
            return unit[functionName];
        throw new Error(`Cannot find '${functionName}' function for ${typeof unit}`);
    }
    _wrapEventMethods({ name, testId, hookId, eventData }) {
        if (name === hook_method_names_1.default.onRequest)
            this._wrapSetMockFn({ testId, hookId, event: eventData });
        else if (name === hook_method_names_1.default._onConfigureResponse)
            this._wrapConfigureResponseEventMethods(eventData);
    }
    _wrapSetMockFn({ testId, hookId, event }) {
        event.setMock = async (mock) => {
            await this.setMock({
                responseEventId: event.id,
                ruleId: event.requestFilterRule.id,
                testId,
                hookId,
                mock
            });
        };
    }
    _wrapConfigureResponseEventMethods(event) {
        event.setHeader = async (name, value) => {
            await this.setHeaderOnConfigureResponseEvent({
                eventId: event.id,
                headerName: name,
                headerValue: value
            });
        };
        event.removeHeader = async (name) => {
            await this.removeHeaderOnConfigureResponseEvent({
                eventId: event.id,
                headerName: name
            });
        };
    }
    _initializeTestRunProxy(testRunId, test) {
        const testRunProxy = new test_run_proxy_1.default({
            dispatcher: this,
            id: testRunId,
            options: this.state.options,
            test
        });
        this.state.testRuns[testRunId] = testRunProxy;
    }
    _initializeFixtureCtx(test) {
        const fixtureId = test.fixture.id;
        if (this.state.fixtureCtxs[fixtureId])
            return;
        this.state.fixtureCtxs[fixtureId] = Object.create(null);
    }
    async setOptions({ value }) {
        this.state.options = value;
    }
    async ready() {
        this.proxy.call(this.ready);
    }
    async cleanUp() {
        await compiler_1.default.cleanUp();
    }
    async getTests({ sourceList, compilerOptions }) {
        const compiler = new compiler_1.default(sourceList, compilerOptions);
        const tests = await compiler.getTests();
        const units = test_structure_1.flatten(tests);
        Object.assign(this.state.units, units);
        return test_structure_1.serialize(units);
    }
    async runTestFn(args) {
        const { id, functionName } = args;
        const unit = this.state.units[id];
        const context = this._getContext(args, unit);
        const functionObject = this._getFunction(unit, functionName);
        if (!functionObject)
            throw new Error(`Cannot find the "${functionName}" of ${typeof unit}`);
        return await functionObject(context);
    }
    executeActionSync({ id, apiMethodName, command, callsite }) {
        return this.proxy.callSync(this.executeAction, { id, apiMethodName, command, callsite });
    }
    async executeAction({ id, apiMethodName, command, callsite }) {
        return this.proxy.call(this.executeAction, { id, apiMethodName, command, callsite });
    }
    async executeCommand({ command, id }) {
        return this.proxy.call(this.executeCommand, { id, command });
    }
    async onRequestHookEvent({ name, testId, hookId, eventData }) {
        this._wrapEventMethods({ name, testId, hookId, eventData });
        const test = this.state.units[testId];
        const targetHook = test.requestHooks.find(hook => hook.id === hookId);
        // @ts-ignore
        await targetHook[name].call(targetHook, eventData);
        if (name === hook_method_names_1.default._onConfigureResponse && targetHook._responseEventConfigureOpts) {
            const { opts, id: eventId } = eventData;
            await this.setConfigureResponseEventOptions({ eventId, opts });
        }
    }
    async setMock({ testId, hookId, ruleId, responseEventId, mock }) {
        await this.proxy.call(this.setMock, { testId, hookId, ruleId, responseEventId, mock });
    }
    async setConfigureResponseEventOptions({ eventId, opts }) {
        await this.proxy.call(this.setConfigureResponseEventOptions, { eventId, opts });
    }
    async setHeaderOnConfigureResponseEvent({ eventId, headerName, headerValue }) {
        await this.proxy.call(this.setHeaderOnConfigureResponseEvent, { eventId, headerName, headerValue });
    }
    async removeHeaderOnConfigureResponseEvent({ eventId, headerName }) {
        await this.proxy.call(this.removeHeaderOnConfigureResponseEvent, { eventId, headerName });
    }
    async executeRequestFilterRulePredicate({ testId, hookId, ruleId, requestInfo }) {
        const test = this.state.units[testId];
        const targetHook = test.requestHooks.find(hook => hook.id === hookId);
        const targetRule = targetHook._requestFilterRules.find(rule => rule.id === ruleId);
        const result = await targetRule.options.call(targetRule, requestInfo);
        return !!result;
    }
    async executeMockPredicate({ testId, hookId, ruleId, requestInfo, res }) {
        const test = this.state.units[testId];
        const requestMock = test.requestHooks.find(hook => hook.id === hookId);
        const responseMock = requestMock.mocks.get(ruleId);
        testcafe_hammerhead_1.responseMockSetBodyMethod.add(res);
        res = Object.assign(res, await responseMock.body(requestInfo, res));
        testcafe_hammerhead_1.responseMockSetBodyMethod.remove(res);
        return res;
    }
    async getWarningMessages({ testRunId }) {
        const testRunProxy = this.state.testRuns[testRunId];
        return testRunProxy.warningLog.messages;
    }
    async addRequestEventListeners({ hookId, hookClassName, rules }) {
        return await this.proxy.call(this.addRequestEventListeners, { hookId, hookClassName, rules });
    }
    async removeRequestEventListeners({ rules }) {
        return await this.proxy.call(this.removeRequestEventListeners, { rules });
    }
    async initializeTestRunData({ testRunId, testId }) {
        const test = this.state.units[testId];
        this._initializeTestRunProxy(testRunId, test);
        this._initializeFixtureCtx(test);
    }
    async getCurrentUrl({ testRunId }) {
        return this.proxy.call(this.getCurrentUrl, { testRunId });
    }
    async getStateSnapshot({ testRunId }) {
        return this.proxy.call(this.getStateSnapshot, { testRunId });
    }
    enableDebugForNonDebugCommands() {
        test_controller_1.default.enableDebugForNonDebugCommands();
    }
    disableDebugForNonDebugCommands() {
        test_controller_1.default.disableDebugForNonDebugCommands();
    }
    async useStateSnapshot({ testRunId, snapshot }) {
        return this.proxy.call(this.useStateSnapshot, { testRunId, snapshot });
    }
    async getTestRunPhase({ testRunId }) {
        return this.proxy.call(this.getTestRunPhase, { testRunId });
    }
    async setTestRunPhase({ testRunId, value }) {
        return this.proxy.call(this.setTestRunPhase, { testRunId, value });
    }
    async getActiveDialogHandler({ testRunId }) {
        return this.proxy.call(this.getActiveDialogHandler, { testRunId });
    }
    async getActiveIframeSelector({ testRunId }) {
        return this.proxy.call(this.getActiveIframeSelector, { testRunId });
    }
    async getSpeed({ testRunId }) {
        return this.proxy.call(this.getSpeed, { testRunId });
    }
    async getPageLoadTimeout({ testRunId }) {
        return this.proxy.call(this.getPageLoadTimeout, { testRunId });
    }
    async setBrowserConsoleMessages({ testRunId, value }) {
        return this.proxy.call(this.setBrowserConsoleMessages, { testRunId, value });
    }
    async getBrowserConsoleMessages({ testRunId }) {
        return this.proxy.call(this.getBrowserConsoleMessages, { testRunId });
    }
}
exports.default = new CompilerService();
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,