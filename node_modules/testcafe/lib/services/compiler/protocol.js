"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFixtureFunctionProperty = exports.isTestFunctionProperty = exports.FUNCTION_PROPERTIES = exports.FIXTURE_FUNCTION_PROPERTIES = exports.TEST_FUNCTION_PROPERTIES = exports.BEFORE_AFTER_EACH_PROPERTIES = exports.BEFORE_AFTER_PROPERTIES = void 0;
exports.BEFORE_AFTER_PROPERTIES = ['beforeFn', 'afterFn'];
exports.BEFORE_AFTER_EACH_PROPERTIES = ['beforeEachFn', 'afterEachFn'];
exports.TEST_FUNCTION_PROPERTIES = ['fn', ...exports.BEFORE_AFTER_PROPERTIES];
exports.FIXTURE_FUNCTION_PROPERTIES = [...exports.BEFORE_AFTER_PROPERTIES, ...exports.BEFORE_AFTER_EACH_PROPERTIES];
exports.FUNCTION_PROPERTIES = [...exports.TEST_FUNCTION_PROPERTIES, ...exports.BEFORE_AFTER_EACH_PROPERTIES];
function isTestFunctionProperty(value) {
    return exports.TEST_FUNCTION_PROPERTIES.includes(value);
}
exports.isTestFunctionProperty = isTestFunctionProperty;
function isFixtureFunctionProperty(value) {
    return exports.FIXTURE_FUNCTION_PROPERTIES.includes(value);
}
exports.isFixtureFunctionProperty = isFixtureFunctionProperty;
//# sourceMappingURL=data:application/json;base64,