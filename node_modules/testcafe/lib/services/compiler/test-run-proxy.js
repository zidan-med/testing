"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const prerender_callsite_1 = __importDefault(require("../../utils/prerender-callsite"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const observed_callsites_storage_1 = __importDefault(require("../../test-run/observed-callsites-storage"));
const warning_log_1 = __importDefault(require("../../notifications/warning-log"));
const executor_1 = __importDefault(require("../../assertions/executor"));
const type_1 = __importDefault(require("../../test-run/commands/type"));
const serviceCommands = __importStar(require("../../test-run/commands/service"));
const get_assertion_timeout_1 = __importDefault(require("../../utils/get-options/get-assertion-timeout"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const phase_1 = __importDefault(require("../../test-run/phase"));
const test_run_1 = require("../../errors/test-run");
const phase_2 = __importDefault(require("../../role/phase"));
const promisify_event_1 = __importDefault(require("promisify-event"));
const bookmark_1 = __importDefault(require("../../test-run/bookmark"));
const actions_1 = require("../../test-run/commands/actions");
const browser_console_messages_1 = __importDefault(require("../../test-run/browser-console-messages"));
class TestRunProxy {
    constructor({ dispatcher, id, test, options }) {
        this.debugging = false;
        this.onAny = lodash_1.noop;
        this.dispatcher = dispatcher;
        this.id = id;
        this.test = test;
        this.ctx = Object.create(null);
        this.fixtureCtx = Object.create(null);
        this._options = options;
        this.currentRoleId = null;
        this.usedRoleStates = Object.create(null);
        // TODO: Synchronize these properties with their real counterparts in the main process.
        // Postponed until (GH-3244). See details in (GH-5250).
        this.controller = new test_controller_1.default(this);
        this.observedCallsites = new observed_callsites_storage_1.default();
        this.warningLog = new warning_log_1.default();
        test_run_tracker_1.default.addActiveTestRun(this);
        this._initializeRequestHooks();
    }
    _initializeRequestHooks() {
        this.test.requestHooks.forEach(this._attachWarningLog, this);
    }
    async _executeAssertion(command, callsite) {
        const assertionTimeout = get_assertion_timeout_1.default(command, this._options);
        const executor = new executor_1.default(command, assertionTimeout, callsite);
        executor.once('start-assertion-retries', timeout => this.executeCommand(new serviceCommands.ShowAssertionRetriesStatusCommand(timeout)));
        executor.once('end-assertion-retries', success => this.executeCommand(new serviceCommands.HideAssertionRetriesStatusCommand(success)));
        return executor.run();
    }
    async _getStateSnapshotFromRole(role) {
        const prevPhase = await this.dispatcher.getTestRunPhase({ testRunId: this.id });
        await this.dispatcher.setTestRunPhase({
            testRunId: this.id,
            value: phase_1.default.inRoleInitializer
        });
        if (role.phase === phase_2.default.uninitialized)
            await role.initialize(this);
        else if (role.phase === phase_2.default.pendingInitialization)
            await promisify_event_1.default(role, 'initialized');
        if (role.initErr)
            throw role.initErr;
        await this.dispatcher.setTestRunPhase({
            testRunId: this.id,
            value: prevPhase
        });
        return role.stateSnapshot;
    }
    async _useRole(role, callsite) {
        const currentPhase = await this.dispatcher.getTestRunPhase({ testRunId: this.id });
        if (currentPhase === phase_1.default.inRoleInitializer)
            throw new test_run_1.RoleSwitchInRoleInitializerError(callsite);
        const bookmark = new bookmark_1.default(this, role);
        await bookmark.init();
        if (this.currentRoleId)
            this.usedRoleStates[this.currentRoleId] = await this.dispatcher.getStateSnapshot({ testRunId: this.id });
        const stateSnapshot = this.usedRoleStates[role.id] || await this._getStateSnapshotFromRole(role);
        await this.dispatcher.useStateSnapshot({
            testRunId: this.id,
            snapshot: stateSnapshot
        });
        this.currentRoleId = role.id;
        await bookmark.restore(callsite, stateSnapshot);
    }
    _decorateWithFlag(fn, flagName, value) {
        return async () => {
            // @ts-ignore
            this[flagName] = value;
            try {
                return await fn();
            }
            catch (err) {
                throw err;
            }
            finally {
                // @ts-ignore
                this[flagName] = !value;
            }
        };
    }
    decoratePreventEmitActionEvents(fn, { prevent }) {
        return this._decorateWithFlag(fn, 'preventEmitActionEvents', prevent);
    }
    decorateDisableDebugBreakpoints(fn, { disable }) {
        return this._decorateWithFlag(fn, 'disableDebugBreakpoints', disable);
    }
    _attachWarningLog(hook) {
        hook._warningLog = this.warningLog;
    }
    _detachWarningLog(hook) {
        hook._warningLog = null;
    }
    async executeAction(apiMethodName, command, callsite) {
        const renderedCallsite = callsite ? prerender_callsite_1.default(callsite) : null;
        if (command.type === type_1.default.assertion)
            return this._executeAssertion(command, renderedCallsite);
        else if (command.type === type_1.default.useRole)
            return this._useRole(command.role, renderedCallsite);
        return this.dispatcher.executeAction({
            apiMethodName,
            command,
            callsite: renderedCallsite,
            id: this.id
        });
    }
    executeActionSync(apiMethodName, command, callsite) {
        const renderedCallsite = callsite ? prerender_callsite_1.default(callsite) : null;
        if (command.type === type_1.default.assertion)
            return this._executeAssertion(command, renderedCallsite);
        return this.dispatcher.executeActionSync({
            apiMethodName,
            command,
            callsite: renderedCallsite,
            id: this.id
        });
    }
    async executeCommand(command) {
        return this.dispatcher.executeCommand({ command, id: this.id });
    }
    async addRequestHook(hook) {
        if (this.test.requestHooks.includes(hook))
            return;
        this.test.requestHooks.push(hook);
        this._attachWarningLog(hook);
        await this.dispatcher.addRequestEventListeners({
            hookId: hook.id,
            hookClassName: hook._className,
            rules: hook._requestFilterRules
        });
    }
    async removeRequestHook(hook) {
        if (!this.test.requestHooks.includes(hook))
            return;
        lodash_1.pull(this.test.requestHooks, hook);
        this._detachWarningLog(hook);
        await this.dispatcher.removeRequestEventListeners({ rules: hook._requestFilterRules });
    }
    async getCurrentUrl() {
        return this.dispatcher.getCurrentUrl({ testRunId: this.id });
    }
    async switchToCleanRun(url) {
        this.ctx = Object.create(null);
        this.fixtureCtx = Object.create(null);
        await this.dispatcher.setBrowserConsoleMessages({
            testRunId: this.id,
            value: new browser_console_messages_1.default()
        });
        await this.dispatcher.useStateSnapshot({
            testRunId: this.id,
            snapshot: testcafe_hammerhead_1.StateSnapshot.empty()
        });
        if (await this.speed !== this._options.speed) {
            const setSpeedCommand = new actions_1.SetTestSpeedCommand({ speed: this._options.speed });
            await this.executeCommand(setSpeedCommand);
        }
        if (await this.pageLoadTimeout !== this._options.pageLoadTimeout) {
            const setPageLoadTimeoutCommand = new actions_1.SetPageLoadTimeoutCommand({ duration: this._options.pageLoadTimeout });
            await this.executeCommand(setPageLoadTimeoutCommand);
        }
        await this.navigateToUrl(url, true);
        if (await this.activeDialogHandler) {
            const removeDialogHandlerCommand = new actions_1.SetNativeDialogHandlerCommand({ dialogHandler: { fn: null } });
            await this.executeCommand(removeDialogHandlerCommand);
        }
    }
    async getStateSnapshot() {
        return this.dispatcher.getStateSnapshot({ testRunId: this.id });
    }
    async navigateToUrl(url, forceReload, stateSnapshot) {
        const navigateCommand = new actions_1.NavigateToCommand({ url, forceReload, stateSnapshot });
        await this.executeCommand(navigateCommand);
    }
    get activeDialogHandler() {
        return this.dispatcher.getActiveDialogHandler({ testRunId: this.id });
    }
    get activeIframeSelector() {
        return this.dispatcher.getActiveIframeSelector({ testRunId: this.id });
    }
    get speed() {
        return this.dispatcher.getSpeed({ testRunId: this.id });
    }
    get pageLoadTimeout() {
        return this.dispatcher.getPageLoadTimeout({ testRunId: this.id });
    }
    get consoleMessages() {
        return this.dispatcher.getBrowserConsoleMessages({ testRunId: this.id });
    }
    get phase() {
        return this.dispatcher.getTestRunPhase({ testRunId: this.id });
    }
    async setConsoleMessages(value) {
        await this.dispatcher.setBrowserConsoleMessages({
            testRunId: this.id,
            value
        });
    }
    async setPhase(value) {
        await this.dispatcher.setTestRunPhase({
            testRunId: this.id,
            value
        });
    }
}
exports.default = TestRunProxy;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,