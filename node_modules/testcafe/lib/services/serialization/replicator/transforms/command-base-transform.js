"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = __importDefault(require("../../../../test-run/commands/type"));
const base_transform_1 = __importDefault(require("./base-transform"));
const base_1 = __importDefault(require("../../../../test-run/commands/base"));
const observation_1 = require("../../../../test-run/commands/observation");
const actions_1 = require("../../../../test-run/commands/actions");
const utils_1 = require("../../../../test-run/commands/utils");
const COMMAND_CONSTRUCTORS = new Map([
    [type_1.default.executeSelector, observation_1.ExecuteSelectorCommand],
    [type_1.default.executeClientFunction, observation_1.ExecuteClientFunctionCommand],
    [type_1.default.wait, observation_1.WaitCommand],
    [type_1.default.click, actions_1.ClickCommand],
    [type_1.default.navigateTo, actions_1.NavigateToCommand],
    [type_1.default.typeText, actions_1.TypeTextCommand],
    [type_1.default.setNativeDialogHandler, actions_1.SetNativeDialogHandlerCommand],
    [type_1.default.switchToIframe, actions_1.SwitchToIframeCommand],
    [type_1.default.setTestSpeed, actions_1.SetTestSpeedCommand],
    [type_1.default.setPageLoadTimeout, actions_1.SetPageLoadTimeoutCommand],
    [type_1.default.pressKey, actions_1.PressKeyCommand],
    [type_1.default.dragToElement, actions_1.DragToElementCommand],
    [type_1.default.selectEditableContent, actions_1.SelectEditableContentCommand],
    [type_1.default.hover, actions_1.HoverCommand]
]);
class CommandBaseTransform extends base_transform_1.default {
    constructor() {
        super('ExecuteClientFunctionCommandBase');
    }
    shouldTransform(_, val) {
        return val instanceof base_1.default;
    }
    _createCommandInstance(CommandConstructor, value) {
        // NOTE: We should not validate the command creation here
        // since it was already done before action execution
        const testRunStub = {};
        const validateProperties = false;
        if (utils_1.isObservationCommand(value))
            return new CommandConstructor(value, testRunStub);
        else if (CommandConstructor === actions_1.SetNativeDialogHandlerCommand)
            return actions_1.SetNativeDialogHandlerCommand.from(value);
        return new CommandConstructor(value, testRunStub, validateProperties);
    }
    fromSerializable(value) {
        const CommandConstructor = COMMAND_CONSTRUCTORS.get(value.type);
        if (!CommandConstructor)
            throw new Error(`An appropriate command constructor for "${value.type}" type was not found.`);
        return this._createCommandInstance(CommandConstructor, value);
    }
}
exports.default = CommandBaseTransform;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1iYXNlLXRyYW5zZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9zZXJpYWxpemF0aW9uL3JlcGxpY2F0b3IvdHJhbnNmb3Jtcy9jb21tYW5kLWJhc2UtdHJhbnNmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOEVBQTZEO0FBQzdELHNFQUE2QztBQUU3Qyw4RUFBNkQ7QUFFN0QsMkVBSW1EO0FBRW5ELG1FQVkrQztBQUcvQywrREFBMkU7QUFNM0UsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsQ0FBNkI7SUFDN0QsQ0FBQyxjQUFXLENBQUMsZUFBZSxFQUFFLG9DQUFzQixDQUFDO0lBQ3JELENBQUMsY0FBVyxDQUFDLHFCQUFxQixFQUFFLDBDQUE0QixDQUFDO0lBQ2pFLENBQUMsY0FBVyxDQUFDLElBQUksRUFBRSx5QkFBVyxDQUFDO0lBQy9CLENBQUMsY0FBVyxDQUFDLEtBQUssRUFBRSxzQkFBWSxDQUFDO0lBQ2pDLENBQUMsY0FBVyxDQUFDLFVBQVUsRUFBRSwyQkFBaUIsQ0FBQztJQUMzQyxDQUFDLGNBQVcsQ0FBQyxRQUFRLEVBQUUseUJBQWUsQ0FBQztJQUN2QyxDQUFDLGNBQVcsQ0FBQyxzQkFBc0IsRUFBRSx1Q0FBNkIsQ0FBQztJQUNuRSxDQUFDLGNBQVcsQ0FBQyxjQUFjLEVBQUUsK0JBQXFCLENBQUM7SUFDbkQsQ0FBQyxjQUFXLENBQUMsWUFBWSxFQUFFLDZCQUFtQixDQUFDO0lBQy9DLENBQUMsY0FBVyxDQUFDLGtCQUFrQixFQUFFLG1DQUF5QixDQUFDO0lBQzNELENBQUMsY0FBVyxDQUFDLFFBQVEsRUFBRSx5QkFBZSxDQUFDO0lBQ3ZDLENBQUMsY0FBVyxDQUFDLGFBQWEsRUFBRSw4QkFBb0IsQ0FBQztJQUNqRCxDQUFDLGNBQVcsQ0FBQyxxQkFBcUIsRUFBRSxzQ0FBNEIsQ0FBQztJQUNqRSxDQUFDLGNBQVcsQ0FBQyxLQUFLLEVBQUUsc0JBQVksQ0FBQztDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFxQixvQkFBcUIsU0FBUSx3QkFBYTtJQUMzRDtRQUNJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxlQUFlLENBQUUsQ0FBVSxFQUFFLEdBQVk7UUFDNUMsT0FBTyxHQUFHLFlBQVksY0FBVyxDQUFDO0lBQ3RDLENBQUM7SUFFTyxzQkFBc0IsQ0FBRSxrQkFBc0MsRUFBRSxLQUF3QjtRQUM1Rix5REFBeUQ7UUFDekQsb0RBQW9EO1FBQ3BELE1BQU0sV0FBVyxHQUFVLEVBQUUsQ0FBQztRQUM5QixNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUVqQyxJQUFJLDRCQUFvQixDQUFDLEtBQUssQ0FBQztZQUMzQixPQUFPLElBQUssa0JBQTZDLENBQUMsS0FBSyxFQUFFLFdBQXNCLENBQUMsQ0FBQzthQUV4RixJQUFJLGtCQUFrQixLQUFLLHVDQUE2QjtZQUN6RCxPQUFPLHVDQUE2QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyRCxPQUFPLElBQUksa0JBQWtCLENBQUMsS0FBSyxFQUFFLFdBQXNCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRU0sZ0JBQWdCLENBQUUsS0FBd0I7UUFDN0MsTUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhFLElBQUksQ0FBQyxrQkFBa0I7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsS0FBSyxDQUFDLElBQUksdUJBQXVCLENBQUMsQ0FBQztRQUVsRyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRSxDQUFDO0NBQ0o7QUFoQ0QsdUNBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbW1hbmRUeXBlIGZyb20gJy4uLy4uLy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL3R5cGUnO1xuaW1wb3J0IEJhc2VUcmFuc2Zvcm0gZnJvbSAnLi9iYXNlLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBTZXJpYWxpemVkQ29tbWFuZCB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IENvbW1hbmRCYXNlIGZyb20gJy4uLy4uLy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL2Jhc2UnO1xuXG5pbXBvcnQge1xuICAgIEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQsXG4gICAgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZCxcbiAgICBXYWl0Q29tbWFuZFxufSBmcm9tICcuLi8uLi8uLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9vYnNlcnZhdGlvbic7XG5cbmltcG9ydCB7XG4gICAgQ2xpY2tDb21tYW5kLFxuICAgIERyYWdUb0VsZW1lbnRDb21tYW5kLFxuICAgIEhvdmVyQ29tbWFuZCxcbiAgICBOYXZpZ2F0ZVRvQ29tbWFuZCxcbiAgICBQcmVzc0tleUNvbW1hbmQsXG4gICAgU2VsZWN0RWRpdGFibGVDb250ZW50Q29tbWFuZCxcbiAgICBTZXROYXRpdmVEaWFsb2dIYW5kbGVyQ29tbWFuZCxcbiAgICBTZXRQYWdlTG9hZFRpbWVvdXRDb21tYW5kLFxuICAgIFNldFRlc3RTcGVlZENvbW1hbmQsXG4gICAgU3dpdGNoVG9JZnJhbWVDb21tYW5kLFxuICAgIFR5cGVUZXh0Q29tbWFuZFxufSBmcm9tICcuLi8uLi8uLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9hY3Rpb25zJztcblxuaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vLi4vLi4vLi4vdGVzdC1ydW4nO1xuaW1wb3J0IHsgaXNPYnNlcnZhdGlvbkNvbW1hbmQgfSBmcm9tICcuLi8uLi8uLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy91dGlscyc7XG5cbnR5cGUgT2JzZXJ2YXRpb25Db25zdHJ1Y3RvciA9IChuZXcgKGluaXQ6IG9iamVjdCwgdGVzdFJ1bjogVGVzdFJ1bikgPT4gYW55KTtcbnR5cGUgQWN0aW9uQ29uc3RydWN0b3IgPSAobmV3IChpbml0OiBvYmplY3QsIHRlc3RSdW46IFRlc3RSdW4sIHZhbGlkYXRlUHJvcGVydGllczogYm9vbGVhbikgPT4gYW55KTtcbnR5cGUgQ29tbWFuZENvbnN0cnVjdG9yID0gT2JzZXJ2YXRpb25Db25zdHJ1Y3RvciB8IEFjdGlvbkNvbnN0cnVjdG9yO1xuXG5jb25zdCBDT01NQU5EX0NPTlNUUlVDVE9SUyA9IG5ldyBNYXA8c3RyaW5nLCBDb21tYW5kQ29uc3RydWN0b3I+KFtcbiAgICBbQ29tbWFuZFR5cGUuZXhlY3V0ZVNlbGVjdG9yLCBFeGVjdXRlU2VsZWN0b3JDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUuZXhlY3V0ZUNsaWVudEZ1bmN0aW9uLCBFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUud2FpdCwgV2FpdENvbW1hbmRdLFxuICAgIFtDb21tYW5kVHlwZS5jbGljaywgQ2xpY2tDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUubmF2aWdhdGVUbywgTmF2aWdhdGVUb0NvbW1hbmRdLFxuICAgIFtDb21tYW5kVHlwZS50eXBlVGV4dCwgVHlwZVRleHRDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUuc2V0TmF0aXZlRGlhbG9nSGFuZGxlciwgU2V0TmF0aXZlRGlhbG9nSGFuZGxlckNvbW1hbmRdLFxuICAgIFtDb21tYW5kVHlwZS5zd2l0Y2hUb0lmcmFtZSwgU3dpdGNoVG9JZnJhbWVDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUuc2V0VGVzdFNwZWVkLCBTZXRUZXN0U3BlZWRDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUuc2V0UGFnZUxvYWRUaW1lb3V0LCBTZXRQYWdlTG9hZFRpbWVvdXRDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUucHJlc3NLZXksIFByZXNzS2V5Q29tbWFuZF0sXG4gICAgW0NvbW1hbmRUeXBlLmRyYWdUb0VsZW1lbnQsIERyYWdUb0VsZW1lbnRDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUuc2VsZWN0RWRpdGFibGVDb250ZW50LCBTZWxlY3RFZGl0YWJsZUNvbnRlbnRDb21tYW5kXSxcbiAgICBbQ29tbWFuZFR5cGUuaG92ZXIsIEhvdmVyQ29tbWFuZF1cbl0pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kQmFzZVRyYW5zZm9ybSBleHRlbmRzIEJhc2VUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCdFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kQmFzZScpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG91bGRUcmFuc2Zvcm0gKF86IHVua25vd24sIHZhbDogdW5rbm93bik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdmFsIGluc3RhbmNlb2YgQ29tbWFuZEJhc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY3JlYXRlQ29tbWFuZEluc3RhbmNlIChDb21tYW5kQ29uc3RydWN0b3I6IENvbW1hbmRDb25zdHJ1Y3RvciwgdmFsdWU6IFNlcmlhbGl6ZWRDb21tYW5kKTogYW55IHtcbiAgICAgICAgLy8gTk9URTogV2Ugc2hvdWxkIG5vdCB2YWxpZGF0ZSB0aGUgY29tbWFuZCBjcmVhdGlvbiBoZXJlXG4gICAgICAgIC8vIHNpbmNlIGl0IHdhcyBhbHJlYWR5IGRvbmUgYmVmb3JlIGFjdGlvbiBleGVjdXRpb25cbiAgICAgICAgY29uc3QgdGVzdFJ1blN0dWIgICAgICAgID0ge307XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlUHJvcGVydGllcyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc09ic2VydmF0aW9uQ29tbWFuZCh2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gbmV3IChDb21tYW5kQ29uc3RydWN0b3IgYXMgT2JzZXJ2YXRpb25Db25zdHJ1Y3RvcikodmFsdWUsIHRlc3RSdW5TdHViIGFzIFRlc3RSdW4pO1xuXG4gICAgICAgIGVsc2UgaWYgKENvbW1hbmRDb25zdHJ1Y3RvciA9PT0gU2V0TmF0aXZlRGlhbG9nSGFuZGxlckNvbW1hbmQpXG4gICAgICAgICAgICByZXR1cm4gU2V0TmF0aXZlRGlhbG9nSGFuZGxlckNvbW1hbmQuZnJvbSh2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb21tYW5kQ29uc3RydWN0b3IodmFsdWUsIHRlc3RSdW5TdHViIGFzIFRlc3RSdW4sIHZhbGlkYXRlUHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGZyb21TZXJpYWxpemFibGUgKHZhbHVlOiBTZXJpYWxpemVkQ29tbWFuZCk6IGFueSB7XG4gICAgICAgIGNvbnN0IENvbW1hbmRDb25zdHJ1Y3RvciA9IENPTU1BTkRfQ09OU1RSVUNUT1JTLmdldCh2YWx1ZS50eXBlKTtcblxuICAgICAgICBpZiAoIUNvbW1hbmRDb25zdHJ1Y3RvcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQW4gYXBwcm9wcmlhdGUgY29tbWFuZCBjb25zdHJ1Y3RvciBmb3IgXCIke3ZhbHVlLnR5cGV9XCIgdHlwZSB3YXMgbm90IGZvdW5kLmApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVDb21tYW5kSW5zdGFuY2UoQ29tbWFuZENvbnN0cnVjdG9yLCB2YWx1ZSk7XG4gICAgfVxufVxuIl19