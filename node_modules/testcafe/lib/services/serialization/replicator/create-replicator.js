"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const replicator_1 = __importDefault(require("replicator"));
const custom_error_transform_1 = __importDefault(require("./transforms/custom-error-transform"));
const browser_console_messages_transform_1 = __importDefault(require("./transforms/browser-console-messages-transform"));
const command_base_transform_1 = __importDefault(require("./transforms/command-base-transform"));
const request_filter_rule_transform_1 = __importDefault(require("./transforms/request-filter-rule-transform"));
const response_mock_transform_1 = __importDefault(require("./transforms/response-mock-transform"));
const request_hook_event_data_transform_1 = __importDefault(require("./transforms/request-hook-event-data-transform"));
const DEFAULT_ERROR_TRANSFORM_TYPE = '[[Error]]';
function getDefaultErrorTransform(replicator) {
    return replicator.transforms.find(transform => {
        return transform.type === DEFAULT_ERROR_TRANSFORM_TYPE;
    });
}
function default_1() {
    // We need to move the 'CustomErrorTransform' transform before the default transform for the 'Error' class
    // to ensure the correct transformation order:
    // TestCafe's and custom errors will be transformed by CustomErrorTransform, built-in errors - by the built-in replicator's transformer.
    const replicator = new replicator_1.default();
    const defaultErrorTransform = getDefaultErrorTransform(replicator);
    const customErrorTransform = new custom_error_transform_1.default();
    return replicator
        .removeTransforms(defaultErrorTransform)
        .addTransforms([
        customErrorTransform,
        defaultErrorTransform,
        new browser_console_messages_transform_1.default(),
        new command_base_transform_1.default(),
        new request_filter_rule_transform_1.default(),
        new response_mock_transform_1.default(),
        new request_hook_event_data_transform_1.default()
    ]);
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlcGxpY2F0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmljZXMvc2VyaWFsaXphdGlvbi9yZXBsaWNhdG9yL2NyZWF0ZS1yZXBsaWNhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNERBQW1EO0FBQ25ELGlHQUF1RTtBQUN2RSx5SEFBOEY7QUFDOUYsaUdBQXVFO0FBQ3ZFLCtHQUFvRjtBQUNwRixtR0FBeUU7QUFDekUsdUhBQTJGO0FBRTNGLE1BQU0sNEJBQTRCLEdBQUcsV0FBVyxDQUFDO0FBRWpELFNBQVMsd0JBQXdCLENBQUUsVUFBc0I7SUFDckQsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUMxQyxPQUFPLFNBQVMsQ0FBQyxJQUFJLEtBQUssNEJBQTRCLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQ7SUFDSSwwR0FBMEc7SUFDMUcsOENBQThDO0lBQzlDLHdJQUF3STtJQUN4SSxNQUFNLFVBQVUsR0FBYyxJQUFJLG9CQUFVLEVBQUUsQ0FBQztJQUMvQyxNQUFNLHFCQUFxQixHQUFHLHdCQUF3QixDQUFDLFVBQVUsQ0FBYyxDQUFDO0lBQ2hGLE1BQU0sb0JBQW9CLEdBQUksSUFBSSxnQ0FBb0IsRUFBRSxDQUFDO0lBRXpELE9BQU8sVUFBVTtTQUNaLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDO1NBQ3ZDLGFBQWEsQ0FBQztRQUNYLG9CQUFvQjtRQUNwQixxQkFBcUI7UUFDckIsSUFBSSw0Q0FBK0IsRUFBRTtRQUNyQyxJQUFJLGdDQUFvQixFQUFFO1FBQzFCLElBQUksdUNBQTBCLEVBQUU7UUFDaEMsSUFBSSxpQ0FBcUIsRUFBRTtRQUMzQixJQUFJLDJDQUE2QixFQUFFO0tBQ3RDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFuQkQsNEJBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlcGxpY2F0b3IsIHsgVHJhbnNmb3JtIH0gZnJvbSAncmVwbGljYXRvcic7XG5pbXBvcnQgQ3VzdG9tRXJyb3JUcmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm1zL2N1c3RvbS1lcnJvci10cmFuc2Zvcm0nO1xuaW1wb3J0IEJyb3dzZXJDb25zb2xlTWVzc2FnZXNUcmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm1zL2Jyb3dzZXItY29uc29sZS1tZXNzYWdlcy10cmFuc2Zvcm0nO1xuaW1wb3J0IENvbW1hbmRCYXNlVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy9jb21tYW5kLWJhc2UtdHJhbnNmb3JtJztcbmltcG9ydCBSZXF1ZXN0RmlsdGVyUnVsZVRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvcmVxdWVzdC1maWx0ZXItcnVsZS10cmFuc2Zvcm0nO1xuaW1wb3J0IFJlc3BvbnNlTW9ja1RyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvcmVzcG9uc2UtbW9jay10cmFuc2Zvcm0nO1xuaW1wb3J0IFJlcXVlc3RIb29rRXZlbnREYXRhVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy9yZXF1ZXN0LWhvb2stZXZlbnQtZGF0YS10cmFuc2Zvcm0nO1xuXG5jb25zdCBERUZBVUxUX0VSUk9SX1RSQU5TRk9STV9UWVBFID0gJ1tbRXJyb3JdXSc7XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRFcnJvclRyYW5zZm9ybSAocmVwbGljYXRvcjogUmVwbGljYXRvcik6IFRyYW5zZm9ybSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHJlcGxpY2F0b3IudHJhbnNmb3Jtcy5maW5kKHRyYW5zZm9ybSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm0udHlwZSA9PT0gREVGQVVMVF9FUlJPUl9UUkFOU0ZPUk1fVFlQRTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCk6IFJlcGxpY2F0b3Ige1xuICAgIC8vIFdlIG5lZWQgdG8gbW92ZSB0aGUgJ0N1c3RvbUVycm9yVHJhbnNmb3JtJyB0cmFuc2Zvcm0gYmVmb3JlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybSBmb3IgdGhlICdFcnJvcicgY2xhc3NcbiAgICAvLyB0byBlbnN1cmUgdGhlIGNvcnJlY3QgdHJhbnNmb3JtYXRpb24gb3JkZXI6XG4gICAgLy8gVGVzdENhZmUncyBhbmQgY3VzdG9tIGVycm9ycyB3aWxsIGJlIHRyYW5zZm9ybWVkIGJ5IEN1c3RvbUVycm9yVHJhbnNmb3JtLCBidWlsdC1pbiBlcnJvcnMgLSBieSB0aGUgYnVpbHQtaW4gcmVwbGljYXRvcidzIHRyYW5zZm9ybWVyLlxuICAgIGNvbnN0IHJlcGxpY2F0b3IgICAgICAgICAgICA9IG5ldyBSZXBsaWNhdG9yKCk7XG4gICAgY29uc3QgZGVmYXVsdEVycm9yVHJhbnNmb3JtID0gZ2V0RGVmYXVsdEVycm9yVHJhbnNmb3JtKHJlcGxpY2F0b3IpIGFzIFRyYW5zZm9ybTtcbiAgICBjb25zdCBjdXN0b21FcnJvclRyYW5zZm9ybSAgPSBuZXcgQ3VzdG9tRXJyb3JUcmFuc2Zvcm0oKTtcblxuICAgIHJldHVybiByZXBsaWNhdG9yXG4gICAgICAgIC5yZW1vdmVUcmFuc2Zvcm1zKGRlZmF1bHRFcnJvclRyYW5zZm9ybSlcbiAgICAgICAgLmFkZFRyYW5zZm9ybXMoW1xuICAgICAgICAgICAgY3VzdG9tRXJyb3JUcmFuc2Zvcm0sXG4gICAgICAgICAgICBkZWZhdWx0RXJyb3JUcmFuc2Zvcm0sXG4gICAgICAgICAgICBuZXcgQnJvd3NlckNvbnNvbGVNZXNzYWdlc1RyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IENvbW1hbmRCYXNlVHJhbnNmb3JtKCksXG4gICAgICAgICAgICBuZXcgUmVxdWVzdEZpbHRlclJ1bGVUcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgIG5ldyBSZXNwb25zZU1vY2tUcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgIG5ldyBSZXF1ZXN0SG9va0V2ZW50RGF0YVRyYW5zZm9ybSgpXG4gICAgICAgIF0pO1xufVxuIl19