(function () {
	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var PENDING = 'pending';
	var SETTLED = 'settled';
	var FULFILLED = 'fulfilled';
	var REJECTED = 'rejected';
	var NOOP = function () {};
	var isNode = typeof commonjsGlobal !== 'undefined' && typeof commonjsGlobal.process !== 'undefined' && typeof commonjsGlobal.process.emit === 'function';

	var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
	var asyncQueue = [];
	var asyncTimer;

	function asyncFlush() {
		// run promise callbacks
		for (var i = 0; i < asyncQueue.length; i++) {
			asyncQueue[i][0](asyncQueue[i][1]);
		}

		// reset async asyncQueue
		asyncQueue = [];
		asyncTimer = false;
	}

	function asyncCall(callback, arg) {
		asyncQueue.push([callback, arg]);

		if (!asyncTimer) {
			asyncTimer = true;
			asyncSetTimer(asyncFlush, 0);
		}
	}

	function invokeResolver(resolver, promise) {
		function resolvePromise(value) {
			resolve(promise, value);
		}

		function rejectPromise(reason) {
			reject(promise, reason);
		}

		try {
			resolver(resolvePromise, rejectPromise);
		} catch (e) {
			rejectPromise(e);
		}
	}

	function invokeCallback(subscriber) {
		var owner = subscriber.owner;
		var settled = owner._state;
		var value = owner._data;
		var callback = subscriber[settled];
		var promise = subscriber.then;

		if (typeof callback === 'function') {
			settled = FULFILLED;
			try {
				value = callback(value);
			} catch (e) {
				reject(promise, e);
			}
		}

		if (!handleThenable(promise, value)) {
			if (settled === FULFILLED) {
				resolve(promise, value);
			}

			if (settled === REJECTED) {
				reject(promise, value);
			}
		}
	}

	function handleThenable(promise, value) {
		var resolved;

		try {
			if (promise === value) {
				throw new TypeError('A promises callback cannot return that same promise.');
			}

			if (value && (typeof value === 'function' || typeof value === 'object')) {
				// then should be retrieved only once
				var then = value.then;

				if (typeof then === 'function') {
					then.call(value, function (val) {
						if (!resolved) {
							resolved = true;

							if (value === val) {
								fulfill(promise, val);
							} else {
								resolve(promise, val);
							}
						}
					}, function (reason) {
						if (!resolved) {
							resolved = true;

							reject(promise, reason);
						}
					});

					return true;
				}
			}
		} catch (e) {
			if (!resolved) {
				reject(promise, e);
			}

			return true;
		}

		return false;
	}

	function resolve(promise, value) {
		if (promise === value || !handleThenable(promise, value)) {
			fulfill(promise, value);
		}
	}

	function fulfill(promise, value) {
		if (promise._state === PENDING) {
			promise._state = SETTLED;
			promise._data = value;

			asyncCall(publishFulfillment, promise);
		}
	}

	function reject(promise, reason) {
		if (promise._state === PENDING) {
			promise._state = SETTLED;
			promise._data = reason;

			asyncCall(publishRejection, promise);
		}
	}

	function publish(promise) {
		promise._then = promise._then.forEach(invokeCallback);
	}

	function publishFulfillment(promise) {
		promise._state = FULFILLED;
		publish(promise);
	}

	function publishRejection(promise) {
		promise._state = REJECTED;
		publish(promise);
		if (!promise._handled && isNode) {
			commonjsGlobal.process.emit('unhandledRejection', promise._data, promise);
		}
	}

	function notifyRejectionHandled(promise) {
		commonjsGlobal.process.emit('rejectionHandled', promise);
	}

	/**
	 * @class
	 */
	function Promise(resolver) {
		if (typeof resolver !== 'function') {
			throw new TypeError('Promise resolver ' + resolver + ' is not a function');
		}

		if (this instanceof Promise === false) {
			throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
		}

		this._then = [];

		invokeResolver(resolver, this);
	}

	Promise.prototype = {
		constructor: Promise,

		_state: PENDING,
		_then: null,
		_data: undefined,
		_handled: false,

		then: function (onFulfillment, onRejection) {
			var subscriber = {
				owner: this,
				then: new this.constructor(NOOP),
				fulfilled: onFulfillment,
				rejected: onRejection
			};

			if ((onRejection || onFulfillment) && !this._handled) {
				this._handled = true;
				if (this._state === REJECTED && isNode) {
					asyncCall(notifyRejectionHandled, this);
				}
			}

			if (this._state === FULFILLED || this._state === REJECTED) {
				// already resolved, call callback async
				asyncCall(invokeCallback, subscriber);
			} else {
				// subscribe
				this._then.push(subscriber);
			}

			return subscriber.then;
		},

		catch: function (onRejection) {
			return this.then(null, onRejection);
		}
	};

	Promise.all = function (promises) {
		if (!Array.isArray(promises)) {
			throw new TypeError('You must pass an array to Promise.all().');
		}

		return new Promise(function (resolve, reject) {
			var results = [];
			var remaining = 0;

			function resolver(index) {
				remaining++;
				return function (value) {
					results[index] = value;
					if (!--remaining) {
						resolve(results);
					}
				};
			}

			for (var i = 0, promise; i < promises.length; i++) {
				promise = promises[i];

				if (promise && typeof promise.then === 'function') {
					promise.then(resolver(i), reject);
				} else {
					results[i] = promise;
				}
			}

			if (!remaining) {
				resolve(results);
			}
		});
	};

	Promise.race = function (promises) {
		if (!Array.isArray(promises)) {
			throw new TypeError('You must pass an array to Promise.race().');
		}

		return new Promise(function (resolve, reject) {
			for (var i = 0, promise; i < promises.length; i++) {
				promise = promises[i];

				if (promise && typeof promise.then === 'function') {
					promise.then(resolve, reject);
				} else {
					resolve(promise);
				}
			}
		});
	};

	Promise.resolve = function (value) {
		if (value && typeof value === 'object' && value.constructor === Promise) {
			return value;
		}

		return new Promise(function (resolve) {
			resolve(value);
		});
	};

	Promise.reject = function (reason) {
		return new Promise(function (resolve, reject) {
			reject(reason);
		});
	};

	var pinkie = Promise;

	var replicator = createCommonjsModule(function (module) {
	// Const
	var TRANSFORMED_TYPE_KEY    = '@t';
	var CIRCULAR_REF_KEY        = '@r';
	var KEY_REQUIRE_ESCAPING_RE = /^#*@(t|r)$/;

	var GLOBAL = (function getGlobal () {
	    // NOTE: see http://www.ecma-international.org/ecma-262/6.0/index.html#sec-performeval step 10
	    var savedEval = eval;

	    return savedEval('this');
	})();

	var TYPED_ARRAY_CTORS = {
	    'Int8Array':         typeof Int8Array === 'function' ? Int8Array : void 0,
	    'Uint8Array':        typeof Uint8Array === 'function' ? Uint8Array : void 0,
	    'Uint8ClampedArray': typeof Uint8ClampedArray === 'function' ? Uint8ClampedArray : void 0,
	    'Int16Array':        typeof Int16Array === 'function' ? Int16Array : void 0,
	    'Uint16Array':       typeof Uint16Array === 'function' ? Uint16Array : void 0,
	    'Int32Array':        typeof Int32Array === 'function' ? Int32Array : void 0,
	    'Uint32Array':       typeof Uint32Array === 'function' ? Uint32Array : void 0,
	    'Float32Array':      typeof Float32Array === 'function' ? Float32Array : void 0,
	    'Float64Array':      typeof Float64Array === 'function' ? Float64Array : void 0
	};

	var ARRAY_BUFFER_SUPPORTED = typeof ArrayBuffer === 'function';
	var MAP_SUPPORTED          = typeof Map === 'function';
	var SET_SUPPORTED          = typeof Set === 'function';
	var BUFFER_FROM_SUPPORTED  = typeof Buffer === 'function';

	var TYPED_ARRAY_SUPPORTED  = function (typeName) {
	    return !!TYPED_ARRAY_CTORS[typeName];
	};

	// Saved proto functions
	var arrSlice = Array.prototype.slice;


	// Default serializer
	var JSONSerializer = {
	    serialize: function (val) {
	        return JSON.stringify(val);
	    },

	    deserialize: function (val) {
	        return JSON.parse(val);
	    }
	};


	// EncodingTransformer
	var EncodingTransformer = function (val, transforms) {
	    this.references               = val;
	    this.transforms               = transforms;
	    this.circularCandidates       = [];
	    this.circularCandidatesDescrs = [];
	    this.circularRefCount         = 0;
	};

	EncodingTransformer._createRefMark = function (idx) {
	    var obj = Object.create(null);

	    obj[CIRCULAR_REF_KEY] = idx;

	    return obj;
	};

	EncodingTransformer.prototype._createCircularCandidate = function (val, parent, key) {
	    this.circularCandidates.push(val);
	    this.circularCandidatesDescrs.push({ parent: parent, key: key, refIdx: -1 });
	};

	EncodingTransformer.prototype._applyTransform = function (val, parent, key, transform) {
	    var result          = Object.create(null);
	    var serializableVal = transform.toSerializable(val);

	    if (typeof serializableVal === 'object')
	        this._createCircularCandidate(val, parent, key);

	    result[TRANSFORMED_TYPE_KEY] = transform.type;
	    result.data                  = this._handleValue(serializableVal, parent, key);

	    return result;
	};

	EncodingTransformer.prototype._handleArray = function (arr) {
	    var result = [];

	    for (var i = 0; i < arr.length; i++)
	        result[i] = this._handleValue(arr[i], result, i);

	    return result;
	};

	EncodingTransformer.prototype._handlePlainObject = function (obj) {
	    var replicator       = this;
	    var result           = Object.create(null);
	    var ownPropertyNames = Object.getOwnPropertyNames(obj);

	    ownPropertyNames.forEach(function (key) {
	        var resultKey = KEY_REQUIRE_ESCAPING_RE.test(key) ? '#' + key : key;

	        result[resultKey] = replicator._handleValue(obj[key], result, resultKey);
	    });

	    return result;
	};

	EncodingTransformer.prototype._handleObject = function (obj, parent, key) {
	    this._createCircularCandidate(obj, parent, key);

	    return Array.isArray(obj) ? this._handleArray(obj) : this._handlePlainObject(obj);
	};

	EncodingTransformer.prototype._ensureCircularReference = function (obj) {
	    var circularCandidateIdx = this.circularCandidates.indexOf(obj);

	    if (circularCandidateIdx > -1) {
	        var descr = this.circularCandidatesDescrs[circularCandidateIdx];

	        if (descr.refIdx === -1)
	            descr.refIdx = descr.parent ? ++this.circularRefCount : 0;

	        return EncodingTransformer._createRefMark(descr.refIdx);
	    }

	    return null;
	};

	EncodingTransformer.prototype._handleValue = function (val, parent, key) {
	    var type     = typeof val;
	    var isObject = type === 'object' && val !== null;

	    if (isObject) {
	        var refMark = this._ensureCircularReference(val);

	        if (refMark)
	            return refMark;
	    }

	    for (var i = 0; i < this.transforms.length; i++) {
	        var transform = this.transforms[i];

	        if (transform.shouldTransform(type, val))
	            return this._applyTransform(val, parent, key, transform);
	    }

	    if (isObject)
	        return this._handleObject(val, parent, key);

	    return val;
	};

	EncodingTransformer.prototype.transform = function () {
	    var references = [this._handleValue(this.references, null, null)];

	    for (var i = 0; i < this.circularCandidatesDescrs.length; i++) {
	        var descr = this.circularCandidatesDescrs[i];

	        if (descr.refIdx > 0) {
	            references[descr.refIdx] = descr.parent[descr.key];
	            descr.parent[descr.key]  = EncodingTransformer._createRefMark(descr.refIdx);
	        }
	    }

	    return references;
	};

	// DecodingTransform
	var DecodingTransformer = function (references, transformsMap) {
	    this.references            = references;
	    this.transformMap          = transformsMap;
	    this.activeTransformsStack = [];
	    this.visitedRefs           = Object.create(null);
	};

	DecodingTransformer.prototype._handlePlainObject = function (obj) {
	    var replicator       = this;
	    var unescaped        = Object.create(null);
	    var ownPropertyNames = Object.getOwnPropertyNames(obj);

	    ownPropertyNames.forEach(function (key) {
	        replicator._handleValue(obj[key], obj, key);

	        if (KEY_REQUIRE_ESCAPING_RE.test(key)) {
	            // NOTE: use intermediate object to avoid unescaped and escaped keys interference
	            // E.g. unescaped "##@t" will be "#@t" which can overwrite escaped "#@t".
	            unescaped[key.substring(1)] = obj[key];
	            delete obj[key];
	        }
	    });

	    for (var unsecapedKey in unescaped)
	        obj[unsecapedKey] = unescaped[unsecapedKey];
	};

	DecodingTransformer.prototype._handleTransformedObject = function (obj, parent, key) {
	    var transformType = obj[TRANSFORMED_TYPE_KEY];
	    var transform     = this.transformMap[transformType];

	    if (!transform)
	        throw new Error('Can\'t find transform for "' + transformType + '" type.');

	    this.activeTransformsStack.push(obj);
	    this._handleValue(obj.data, obj, 'data');
	    this.activeTransformsStack.pop();

	    parent[key] = transform.fromSerializable(obj.data);
	};

	DecodingTransformer.prototype._handleCircularSelfRefDuringTransform = function (refIdx, parent, key) {
	    // NOTE: we've hit a hard case: object reference itself during transformation.
	    // We can't dereference it since we don't have resulting object yet. And we'll
	    // not be able to restore reference lately because we will need to traverse
	    // transformed object again and reference might be unreachable or new object contain
	    // new circular references. As a workaround we create getter, so once transformation
	    // complete, dereferenced property will point to correct transformed object.
	    var references = this.references;
	    var val = void 0;

	    Object.defineProperty(parent, key, {
	        configurable: true,
	        enumerable:   true,

	        get: function () {
	            if (val === void 0)
	                val = references[refIdx];

	            return val;
	        },

	        set: function (value) {
	            val = value;
	            return val;
	        }
	    });
	};

	DecodingTransformer.prototype._handleCircularRef = function (refIdx, parent, key) {
	    if (this.activeTransformsStack.indexOf(this.references[refIdx]) > -1)
	        this._handleCircularSelfRefDuringTransform(refIdx, parent, key);

	    else {
	        if (!this.visitedRefs[refIdx]) {
	            this.visitedRefs[refIdx] = true;
	            this._handleValue(this.references[refIdx], this.references, refIdx);
	        }

	        parent[key] = this.references[refIdx];
	    }
	};

	DecodingTransformer.prototype._handleValue = function (val, parent, key) {
	    if (typeof val !== 'object' || val === null)
	        return;

	    var refIdx = val[CIRCULAR_REF_KEY];

	    if (refIdx !== void 0)
	        this._handleCircularRef(refIdx, parent, key);

	    else if (val[TRANSFORMED_TYPE_KEY])
	        this._handleTransformedObject(val, parent, key);

	    else if (Array.isArray(val)) {
	        for (var i = 0; i < val.length; i++)
	            this._handleValue(val[i], val, i);
	    }

	    else
	        this._handlePlainObject(val);
	};

	DecodingTransformer.prototype.transform = function () {
	    this.visitedRefs[0] = true;
	    this._handleValue(this.references[0], this.references, 0);

	    return this.references[0];
	};


	// Transforms
	var builtInTransforms = [
	    {
	        type: '[[NaN]]',

	        shouldTransform: function (type, val) {
	            return type === 'number' && isNaN(val);
	        },

	        toSerializable: function () {
	            return '';
	        },

	        fromSerializable: function () {
	            return NaN;
	        }
	    },

	    {
	        type: '[[undefined]]',

	        shouldTransform: function (type) {
	            return type === 'undefined';
	        },

	        toSerializable: function () {
	            return '';
	        },

	        fromSerializable: function () {
	            return void 0;
	        }
	    },
	    {
	        type: '[[Date]]',

	        shouldTransform: function (type, val) {
	            return val instanceof Date;
	        },

	        toSerializable: function (date) {
	            return date.getTime();
	        },

	        fromSerializable: function (val) {
	            var date = new Date();

	            date.setTime(val);
	            return date;
	        }
	    },
	    {
	        type: '[[RegExp]]',

	        shouldTransform: function (type, val) {
	            return val instanceof RegExp;
	        },

	        toSerializable: function (re) {
	            var result = {
	                src:   re.source,
	                flags: ''
	            };

	            if (re.global)
	                result.flags += 'g';

	            if (re.ignoreCase)
	                result.flags += 'i';

	            if (re.multiline)
	                result.flags += 'm';

	            return result;
	        },

	        fromSerializable: function (val) {
	            return new RegExp(val.src, val.flags);
	        }
	    },

	    {
	        type: '[[Error]]',

	        shouldTransform: function (type, val) {
	            return val instanceof Error;
	        },

	        toSerializable: function (err) {
	            return {
	                name:    err.name,
	                message: err.message,
	                stack:   err.stack
	            };
	        },

	        fromSerializable: function (val) {
	            var Ctor = GLOBAL[val.name] || Error;
	            var err  = new Ctor(val.message);

	            err.stack = val.stack;
	            return err;
	        }
	    },

	    {
	        type: '[[ArrayBuffer]]',

	        shouldTransform: function (type, val) {
	            return ARRAY_BUFFER_SUPPORTED && val instanceof ArrayBuffer;
	        },

	        toSerializable: function (buffer) {
	            var view = new Int8Array(buffer);

	            return arrSlice.call(view);
	        },

	        fromSerializable: function (val) {
	            if (ARRAY_BUFFER_SUPPORTED) {
	                var buffer = new ArrayBuffer(val.length);
	                var view   = new Int8Array(buffer);

	                view.set(val);

	                return buffer;
	            }

	            return val;
	        }
	    },

	    {
	        type: '[[Buffer]]',

	        shouldTransform: function (type, val) {
	            return BUFFER_FROM_SUPPORTED && val instanceof Buffer;
	        },

	        toSerializable: function (buffer) {
	            return arrSlice.call(buffer);
	        },

	        fromSerializable: function (val) {
	            if (BUFFER_FROM_SUPPORTED)
	                return Buffer.from(val);

	            return val;
	        }
	    },

	    {
	        type: '[[TypedArray]]',

	        shouldTransform: function (type, val) {
	            return Object.keys(TYPED_ARRAY_CTORS).some(function (ctorName) {
	                return TYPED_ARRAY_SUPPORTED(ctorName) && val instanceof TYPED_ARRAY_CTORS[ctorName];
	            });
	        },

	        toSerializable: function (arr) {
	            return {
	                ctorName: arr.constructor.name,
	                arr:      arrSlice.call(arr)
	            };
	        },

	        fromSerializable: function (val) {
	            return TYPED_ARRAY_SUPPORTED(val.ctorName) ? new TYPED_ARRAY_CTORS[val.ctorName](val.arr) : val.arr;
	        }
	    },

	    {
	        type: '[[Map]]',

	        shouldTransform: function (type, val) {
	            return MAP_SUPPORTED && val instanceof Map;
	        },

	        toSerializable: function (map) {
	            var flattenedKVArr = [];

	            map.forEach(function (val, key) {
	                flattenedKVArr.push(key);
	                flattenedKVArr.push(val);
	            });

	            return flattenedKVArr;
	        },

	        fromSerializable: function (val) {
	            if (MAP_SUPPORTED) {
	                // NOTE: new Map(iterable) is not supported by all browsers
	                var map = new Map();

	                for (var i = 0; i < val.length; i += 2)
	                    map.set(val[i], val[i + 1]);

	                return map;
	            }

	            var kvArr = [];

	            for (var j = 0; j < val.length; j += 2)
	                kvArr.push([val[i], val[i + 1]]);

	            return kvArr;
	        }
	    },

	    {
	        type: '[[Set]]',

	        shouldTransform: function (type, val) {
	            return SET_SUPPORTED && val instanceof Set;
	        },

	        toSerializable: function (set) {
	            var arr = [];

	            set.forEach(function (val) {
	                arr.push(val);
	            });

	            return arr;
	        },

	        fromSerializable: function (val) {
	            if (SET_SUPPORTED) {
	                // NOTE: new Set(iterable) is not supported by all browsers
	                var set = new Set();

	                for (var i = 0; i < val.length; i++)
	                    set.add(val[i]);

	                return set;
	            }

	            return val;
	        }
	    }
	];

	// Replicator
	var Replicator = module.exports = function (serializer) {
	    this.transforms    = [];
	    this.transformsMap = Object.create(null);
	    this.serializer    = serializer || JSONSerializer;

	    this.addTransforms(builtInTransforms);
	};

	// Manage transforms
	Replicator.prototype.addTransforms = function (transforms) {
	    transforms = Array.isArray(transforms) ? transforms : [transforms];

	    for (var i = 0; i < transforms.length; i++) {
	        var transform = transforms[i];

	        if (this.transformsMap[transform.type])
	            throw new Error('Transform with type "' + transform.type + '" was already added.');

	        this.transforms.push(transform);
	        this.transformsMap[transform.type] = transform;
	    }

	    return this;
	};

	Replicator.prototype.removeTransforms = function (transforms) {
	    transforms = Array.isArray(transforms) ? transforms : [transforms];

	    for (var i = 0; i < transforms.length; i++) {
	        var transform = transforms[i];
	        var idx       = this.transforms.indexOf(transform);

	        if (idx > -1)
	            this.transforms.splice(idx, 1);

	        delete this.transformsMap[transform.type];
	    }

	    return this;
	};

	Replicator.prototype.encode = function (val) {
	    var transformer = new EncodingTransformer(val, this.transforms);
	    var references  = transformer.transform();

	    return this.serializer.serialize(references);
	};

	Replicator.prototype.decode = function (val) {
	    var references  = this.serializer.deserialize(val);
	    var transformer = new DecodingTransformer(references, this.transformsMap);

	    return transformer.transform();
	};
	});

	var FunctionCtor = window.Function;
	// NOTE: evalFunction is isolated into a separate module to
	// restrict access to TestCafe intrinsics for the evaluated code.
	// It also accepts `__dependencies$` argument which may be used by evaluated code.
	function evalFunction(fnCode, __dependencies$) {
	    var evaluator = new FunctionCtor('fnCode', '__dependencies$', '"use strict"; return eval(fnCode)');
	    return evaluator(fnCode, __dependencies$);
	}

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	// -------------------------------------------------------------
	// WARNING: this file is used by both the client and the server.
	// Do not use any browser or node-specific API!
	// -------------------------------------------------------------
	var TEST_RUN_ERRORS = {
	    uncaughtErrorOnPage: 'E1',
	    uncaughtErrorInTestCode: 'E2',
	    uncaughtNonErrorObjectInTestCode: 'E3',
	    uncaughtErrorInClientFunctionCode: 'E4',
	    uncaughtErrorInCustomDOMPropertyCode: 'E5',
	    unhandledPromiseRejection: 'E6',
	    uncaughtException: 'E7',
	    missingAwaitError: 'E8',
	    actionIntegerOptionError: 'E9',
	    actionPositiveIntegerOptionError: 'E10',
	    actionBooleanOptionError: 'E11',
	    actionSpeedOptionError: 'E12',
	    actionOptionsTypeError: 'E14',
	    actionBooleanArgumentError: 'E15',
	    actionStringArgumentError: 'E16',
	    actionNullableStringArgumentError: 'E17',
	    actionStringOrStringArrayArgumentError: 'E18',
	    actionStringArrayElementError: 'E19',
	    actionIntegerArgumentError: 'E20',
	    actionRoleArgumentError: 'E21',
	    actionPositiveIntegerArgumentError: 'E22',
	    actionSelectorError: 'E23',
	    actionElementNotFoundError: 'E24',
	    actionElementIsInvisibleError: 'E26',
	    actionSelectorMatchesWrongNodeTypeError: 'E27',
	    actionAdditionalElementNotFoundError: 'E28',
	    actionAdditionalElementIsInvisibleError: 'E29',
	    actionAdditionalSelectorMatchesWrongNodeTypeError: 'E30',
	    actionElementNonEditableError: 'E31',
	    actionElementNotTextAreaError: 'E32',
	    actionElementNonContentEditableError: 'E33',
	    actionElementIsNotFileInputError: 'E34',
	    actionRootContainerNotFoundError: 'E35',
	    actionIncorrectKeysError: 'E36',
	    actionCannotFindFileToUploadError: 'E37',
	    actionUnsupportedDeviceTypeError: 'E38',
	    actionIframeIsNotLoadedError: 'E39',
	    actionElementNotIframeError: 'E40',
	    actionInvalidScrollTargetError: 'E41',
	    currentIframeIsNotLoadedError: 'E42',
	    currentIframeNotFoundError: 'E43',
	    currentIframeIsInvisibleError: 'E44',
	    nativeDialogNotHandledError: 'E45',
	    uncaughtErrorInNativeDialogHandler: 'E46',
	    setTestSpeedArgumentError: 'E47',
	    setNativeDialogHandlerCodeWrongTypeError: 'E48',
	    clientFunctionExecutionInterruptionError: 'E49',
	    domNodeClientFunctionResultError: 'E50',
	    invalidSelectorResultError: 'E51',
	    cannotObtainInfoForElementSpecifiedBySelectorError: 'E52',
	    externalAssertionLibraryError: 'E53',
	    pageLoadError: 'E54',
	    windowDimensionsOverflowError: 'E55',
	    forbiddenCharactersInScreenshotPathError: 'E56',
	    invalidElementScreenshotDimensionsError: 'E57',
	    roleSwitchInRoleInitializerError: 'E58',
	    assertionExecutableArgumentError: 'E59',
	    assertionWithoutMethodCallError: 'E60',
	    assertionUnawaitedPromiseError: 'E61',
	    requestHookNotImplementedError: 'E62',
	    requestHookUnhandledError: 'E63',
	    uncaughtErrorInCustomClientScriptCode: 'E64',
	    uncaughtErrorInCustomClientScriptCodeLoadedFromModule: 'E65',
	    uncaughtErrorInCustomScript: 'E66',
	    uncaughtTestCafeErrorInCustomScript: 'E67',
	    childWindowIsNotLoadedError: 'E68',
	    childWindowNotFoundError: 'E69',
	    cannotSwitchToWindowError: 'E70',
	    closeChildWindowError: 'E71',
	    childWindowClosedBeforeSwitchingError: 'E72',
	    cannotCloseWindowWithChildrenError: 'E73',
	    targetWindowNotFoundError: 'E74',
	    parentWindowNotFoundError: 'E76',
	    previousWindowNotFoundError: 'E77',
	    switchToWindowPredicateError: 'E78',
	    actionFunctionArgumentError: 'E79',
	    multipleWindowsModeIsDisabledError: 'E80',
	    multipleWindowsModeIsNotSupportedInRemoteBrowserError: 'E81',
	    cannotCloseWindowWithoutParent: 'E82',
	    cannotRestoreChildWindowError: 'E83'
	};

	// Base
	//--------------------------------------------------------------------
	var TestRunErrorBase = /** @class */ (function () {
	    function TestRunErrorBase(code, callsite) {
	        this.code = code;
	        this.isTestCafeError = true;
	        this.callsite = callsite || null;
	    }
	    return TestRunErrorBase;
	}());
	var ActionOptionErrorBase = /** @class */ (function (_super) {
	    __extends(ActionOptionErrorBase, _super);
	    function ActionOptionErrorBase(code, optionName, actualValue) {
	        var _this = _super.call(this, code) || this;
	        _this.optionName = optionName;
	        _this.actualValue = actualValue;
	        return _this;
	    }
	    return ActionOptionErrorBase;
	}(TestRunErrorBase));
	// Client function errors
	//--------------------------------------------------------------------
	var ClientFunctionExecutionInterruptionError = /** @class */ (function (_super) {
	    __extends(ClientFunctionExecutionInterruptionError, _super);
	    function ClientFunctionExecutionInterruptionError(instantiationCallsiteName, callsite) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.clientFunctionExecutionInterruptionError, callsite) || this;
	        _this.instantiationCallsiteName = instantiationCallsiteName;
	        return _this;
	    }
	    return ClientFunctionExecutionInterruptionError;
	}(TestRunErrorBase));
	var DomNodeClientFunctionResultError = /** @class */ (function (_super) {
	    __extends(DomNodeClientFunctionResultError, _super);
	    function DomNodeClientFunctionResultError(instantiationCallsiteName, callsite) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.domNodeClientFunctionResultError, callsite) || this;
	        _this.instantiationCallsiteName = instantiationCallsiteName;
	        return _this;
	    }
	    return DomNodeClientFunctionResultError;
	}(TestRunErrorBase));
	// Selector errors
	//--------------------------------------------------------------------
	var SelectorErrorBase = /** @class */ (function (_super) {
	    __extends(SelectorErrorBase, _super);
	    function SelectorErrorBase(code, _a) {
	        var apiFnChain = _a.apiFnChain, apiFnIndex = _a.apiFnIndex;
	        var _this = _super.call(this, code) || this;
	        _this.apiFnChain = apiFnChain;
	        _this.apiFnIndex = apiFnIndex;
	        return _this;
	    }
	    return SelectorErrorBase;
	}(TestRunErrorBase));
	var InvalidSelectorResultError = /** @class */ (function (_super) {
	    __extends(InvalidSelectorResultError, _super);
	    function InvalidSelectorResultError() {
	        return _super.call(this, TEST_RUN_ERRORS.invalidSelectorResultError) || this;
	    }
	    return InvalidSelectorResultError;
	}(TestRunErrorBase));
	var CannotObtainInfoForElementSpecifiedBySelectorError = /** @class */ (function (_super) {
	    __extends(CannotObtainInfoForElementSpecifiedBySelectorError, _super);
	    function CannotObtainInfoForElementSpecifiedBySelectorError(callsite, apiFnArgs) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.cannotObtainInfoForElementSpecifiedBySelectorError, apiFnArgs) || this;
	        _this.callsite = callsite;
	        return _this;
	    }
	    return CannotObtainInfoForElementSpecifiedBySelectorError;
	}(SelectorErrorBase));
	// Uncaught errors
	//--------------------------------------------------------------------
	var UncaughtErrorOnPage = /** @class */ (function (_super) {
	    __extends(UncaughtErrorOnPage, _super);
	    function UncaughtErrorOnPage(errStack, pageDestUrl) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.uncaughtErrorOnPage) || this;
	        _this.errStack = errStack;
	        _this.pageDestUrl = pageDestUrl;
	        return _this;
	    }
	    return UncaughtErrorOnPage;
	}(TestRunErrorBase));
	var UncaughtErrorInClientFunctionCode = /** @class */ (function (_super) {
	    __extends(UncaughtErrorInClientFunctionCode, _super);
	    function UncaughtErrorInClientFunctionCode(instantiationCallsiteName, err, callsite) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.uncaughtErrorInClientFunctionCode, callsite) || this;
	        _this.errMsg = String(err);
	        _this.instantiationCallsiteName = instantiationCallsiteName;
	        return _this;
	    }
	    return UncaughtErrorInClientFunctionCode;
	}(TestRunErrorBase));
	var UncaughtErrorInCustomDOMPropertyCode = /** @class */ (function (_super) {
	    __extends(UncaughtErrorInCustomDOMPropertyCode, _super);
	    function UncaughtErrorInCustomDOMPropertyCode(instantiationCallsiteName, err, prop) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.uncaughtErrorInCustomDOMPropertyCode) || this;
	        _this.errMsg = String(err);
	        _this.property = prop;
	        _this.instantiationCallsiteName = instantiationCallsiteName;
	        return _this;
	    }
	    return UncaughtErrorInCustomDOMPropertyCode;
	}(TestRunErrorBase));
	var UncaughtErrorInCustomClientScriptCode = /** @class */ (function (_super) {
	    __extends(UncaughtErrorInCustomClientScriptCode, _super);
	    function UncaughtErrorInCustomClientScriptCode(err) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.uncaughtErrorInCustomClientScriptCode) || this;
	        _this.errMsg = String(err);
	        return _this;
	    }
	    return UncaughtErrorInCustomClientScriptCode;
	}(TestRunErrorBase));
	var UncaughtErrorInCustomClientScriptLoadedFromModule = /** @class */ (function (_super) {
	    __extends(UncaughtErrorInCustomClientScriptLoadedFromModule, _super);
	    function UncaughtErrorInCustomClientScriptLoadedFromModule(err, moduleName) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.uncaughtErrorInCustomClientScriptCodeLoadedFromModule) || this;
	        _this.errMsg = String(err);
	        _this.moduleName = moduleName;
	        return _this;
	    }
	    return UncaughtErrorInCustomClientScriptLoadedFromModule;
	}(TestRunErrorBase));
	// Action parameters errors
	//--------------------------------------------------------------------
	// Options errors
	//--------------------------------------------------------------------
	var ActionIntegerOptionError = /** @class */ (function (_super) {
	    __extends(ActionIntegerOptionError, _super);
	    function ActionIntegerOptionError(optionName, actualValue) {
	        return _super.call(this, TEST_RUN_ERRORS.actionIntegerOptionError, optionName, actualValue) || this;
	    }
	    return ActionIntegerOptionError;
	}(ActionOptionErrorBase));
	var ActionPositiveIntegerOptionError = /** @class */ (function (_super) {
	    __extends(ActionPositiveIntegerOptionError, _super);
	    function ActionPositiveIntegerOptionError(optionName, actualValue) {
	        return _super.call(this, TEST_RUN_ERRORS.actionPositiveIntegerOptionError, optionName, actualValue) || this;
	    }
	    return ActionPositiveIntegerOptionError;
	}(ActionOptionErrorBase));
	var ActionBooleanOptionError = /** @class */ (function (_super) {
	    __extends(ActionBooleanOptionError, _super);
	    function ActionBooleanOptionError(optionName, actualValue) {
	        return _super.call(this, TEST_RUN_ERRORS.actionBooleanOptionError, optionName, actualValue) || this;
	    }
	    return ActionBooleanOptionError;
	}(ActionOptionErrorBase));
	var ActionSpeedOptionError = /** @class */ (function (_super) {
	    __extends(ActionSpeedOptionError, _super);
	    function ActionSpeedOptionError(optionName, actualValue) {
	        return _super.call(this, TEST_RUN_ERRORS.actionSpeedOptionError, optionName, actualValue) || this;
	    }
	    return ActionSpeedOptionError;
	}(ActionOptionErrorBase));
	// Action execution errors
	//--------------------------------------------------------------------
	var ActionElementNotFoundError = /** @class */ (function (_super) {
	    __extends(ActionElementNotFoundError, _super);
	    function ActionElementNotFoundError(apiFnArgs) {
	        return _super.call(this, TEST_RUN_ERRORS.actionElementNotFoundError, apiFnArgs) || this;
	    }
	    return ActionElementNotFoundError;
	}(SelectorErrorBase));
	var ActionElementIsInvisibleError = /** @class */ (function (_super) {
	    __extends(ActionElementIsInvisibleError, _super);
	    function ActionElementIsInvisibleError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionElementIsInvisibleError) || this;
	    }
	    return ActionElementIsInvisibleError;
	}(TestRunErrorBase));
	var ActionSelectorMatchesWrongNodeTypeError = /** @class */ (function (_super) {
	    __extends(ActionSelectorMatchesWrongNodeTypeError, _super);
	    function ActionSelectorMatchesWrongNodeTypeError(nodeDescription) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionSelectorMatchesWrongNodeTypeError) || this;
	        _this.nodeDescription = nodeDescription;
	        return _this;
	    }
	    return ActionSelectorMatchesWrongNodeTypeError;
	}(TestRunErrorBase));
	var ActionAdditionalElementNotFoundError = /** @class */ (function (_super) {
	    __extends(ActionAdditionalElementNotFoundError, _super);
	    function ActionAdditionalElementNotFoundError(argumentName, apiFnArgs) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionAdditionalElementNotFoundError, apiFnArgs) || this;
	        _this.argumentName = argumentName;
	        return _this;
	    }
	    return ActionAdditionalElementNotFoundError;
	}(SelectorErrorBase));
	var ActionAdditionalElementIsInvisibleError = /** @class */ (function (_super) {
	    __extends(ActionAdditionalElementIsInvisibleError, _super);
	    function ActionAdditionalElementIsInvisibleError(argumentName) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionAdditionalElementIsInvisibleError) || this;
	        _this.argumentName = argumentName;
	        return _this;
	    }
	    return ActionAdditionalElementIsInvisibleError;
	}(TestRunErrorBase));
	var ActionAdditionalSelectorMatchesWrongNodeTypeError = /** @class */ (function (_super) {
	    __extends(ActionAdditionalSelectorMatchesWrongNodeTypeError, _super);
	    function ActionAdditionalSelectorMatchesWrongNodeTypeError(argumentName, nodeDescription) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionAdditionalSelectorMatchesWrongNodeTypeError) || this;
	        _this.argumentName = argumentName;
	        _this.nodeDescription = nodeDescription;
	        return _this;
	    }
	    return ActionAdditionalSelectorMatchesWrongNodeTypeError;
	}(TestRunErrorBase));
	var ActionElementNonEditableError = /** @class */ (function (_super) {
	    __extends(ActionElementNonEditableError, _super);
	    function ActionElementNonEditableError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionElementNonEditableError) || this;
	    }
	    return ActionElementNonEditableError;
	}(TestRunErrorBase));
	var ActionElementNotTextAreaError = /** @class */ (function (_super) {
	    __extends(ActionElementNotTextAreaError, _super);
	    function ActionElementNotTextAreaError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionElementNotTextAreaError) || this;
	    }
	    return ActionElementNotTextAreaError;
	}(TestRunErrorBase));
	var ActionElementNonContentEditableError = /** @class */ (function (_super) {
	    __extends(ActionElementNonContentEditableError, _super);
	    function ActionElementNonContentEditableError(argumentName) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionElementNonContentEditableError) || this;
	        _this.argumentName = argumentName;
	        return _this;
	    }
	    return ActionElementNonContentEditableError;
	}(TestRunErrorBase));
	var ActionRootContainerNotFoundError = /** @class */ (function (_super) {
	    __extends(ActionRootContainerNotFoundError, _super);
	    function ActionRootContainerNotFoundError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionRootContainerNotFoundError) || this;
	    }
	    return ActionRootContainerNotFoundError;
	}(TestRunErrorBase));
	var ActionIncorrectKeysError = /** @class */ (function (_super) {
	    __extends(ActionIncorrectKeysError, _super);
	    function ActionIncorrectKeysError(argumentName) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionIncorrectKeysError) || this;
	        _this.argumentName = argumentName;
	        return _this;
	    }
	    return ActionIncorrectKeysError;
	}(TestRunErrorBase));
	var ActionCannotFindFileToUploadError = /** @class */ (function (_super) {
	    __extends(ActionCannotFindFileToUploadError, _super);
	    function ActionCannotFindFileToUploadError(filePaths, scannedFilePaths) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionCannotFindFileToUploadError) || this;
	        _this.filePaths = filePaths;
	        _this.scannedFilePaths = scannedFilePaths;
	        return _this;
	    }
	    return ActionCannotFindFileToUploadError;
	}(TestRunErrorBase));
	var ActionElementIsNotFileInputError = /** @class */ (function (_super) {
	    __extends(ActionElementIsNotFileInputError, _super);
	    function ActionElementIsNotFileInputError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionElementIsNotFileInputError) || this;
	    }
	    return ActionElementIsNotFileInputError;
	}(TestRunErrorBase));
	var ActionInvalidScrollTargetError = /** @class */ (function (_super) {
	    __extends(ActionInvalidScrollTargetError, _super);
	    function ActionInvalidScrollTargetError(scrollTargetXValid, scrollTargetYValid) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.actionInvalidScrollTargetError) || this;
	        if (!scrollTargetXValid) {
	            if (!scrollTargetYValid)
	                _this.properties = 'scrollTargetX and scrollTargetY properties';
	            else
	                _this.properties = 'scrollTargetX property';
	        }
	        else
	            _this.properties = 'scrollTargetY property';
	        return _this;
	    }
	    return ActionInvalidScrollTargetError;
	}(TestRunErrorBase));
	var InvalidElementScreenshotDimensionsError = /** @class */ (function (_super) {
	    __extends(InvalidElementScreenshotDimensionsError, _super);
	    function InvalidElementScreenshotDimensionsError(width, height) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.invalidElementScreenshotDimensionsError) || this;
	        var widthIsInvalid = width <= 0;
	        var heightIsInvalid = height <= 0;
	        if (widthIsInvalid) {
	            if (heightIsInvalid) {
	                _this.verb = 'are';
	                _this.dimensions = 'width and height';
	            }
	            else {
	                _this.verb = 'is';
	                _this.dimensions = 'width';
	            }
	        }
	        else {
	            _this.verb = 'is';
	            _this.dimensions = 'height';
	        }
	        return _this;
	    }
	    return InvalidElementScreenshotDimensionsError;
	}(TestRunErrorBase));
	// Iframe errors
	//--------------------------------------------------------------------
	var ActionElementNotIframeError = /** @class */ (function (_super) {
	    __extends(ActionElementNotIframeError, _super);
	    function ActionElementNotIframeError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionElementNotIframeError) || this;
	    }
	    return ActionElementNotIframeError;
	}(TestRunErrorBase));
	var ActionIframeIsNotLoadedError = /** @class */ (function (_super) {
	    __extends(ActionIframeIsNotLoadedError, _super);
	    function ActionIframeIsNotLoadedError() {
	        return _super.call(this, TEST_RUN_ERRORS.actionIframeIsNotLoadedError) || this;
	    }
	    return ActionIframeIsNotLoadedError;
	}(TestRunErrorBase));
	var CurrentIframeIsNotLoadedError = /** @class */ (function (_super) {
	    __extends(CurrentIframeIsNotLoadedError, _super);
	    function CurrentIframeIsNotLoadedError() {
	        return _super.call(this, TEST_RUN_ERRORS.currentIframeIsNotLoadedError) || this;
	    }
	    return CurrentIframeIsNotLoadedError;
	}(TestRunErrorBase));
	var ChildWindowNotFoundError = /** @class */ (function (_super) {
	    __extends(ChildWindowNotFoundError, _super);
	    function ChildWindowNotFoundError() {
	        return _super.call(this, TEST_RUN_ERRORS.childWindowNotFoundError) || this;
	    }
	    return ChildWindowNotFoundError;
	}(TestRunErrorBase));
	var ChildWindowIsNotLoadedError = /** @class */ (function (_super) {
	    __extends(ChildWindowIsNotLoadedError, _super);
	    function ChildWindowIsNotLoadedError() {
	        return _super.call(this, TEST_RUN_ERRORS.childWindowIsNotLoadedError) || this;
	    }
	    return ChildWindowIsNotLoadedError;
	}(TestRunErrorBase));
	var CannotSwitchToWindowError = /** @class */ (function (_super) {
	    __extends(CannotSwitchToWindowError, _super);
	    function CannotSwitchToWindowError() {
	        return _super.call(this, TEST_RUN_ERRORS.cannotSwitchToWindowError) || this;
	    }
	    return CannotSwitchToWindowError;
	}(TestRunErrorBase));
	var CloseChildWindowError = /** @class */ (function (_super) {
	    __extends(CloseChildWindowError, _super);
	    function CloseChildWindowError() {
	        return _super.call(this, TEST_RUN_ERRORS.closeChildWindowError) || this;
	    }
	    return CloseChildWindowError;
	}(TestRunErrorBase));
	var CannotCloseWindowWithChildrenError = /** @class */ (function (_super) {
	    __extends(CannotCloseWindowWithChildrenError, _super);
	    function CannotCloseWindowWithChildrenError() {
	        return _super.call(this, TEST_RUN_ERRORS.cannotCloseWindowWithChildrenError) || this;
	    }
	    return CannotCloseWindowWithChildrenError;
	}(TestRunErrorBase));
	var CannotCloseWindowWithoutParentError = /** @class */ (function (_super) {
	    __extends(CannotCloseWindowWithoutParentError, _super);
	    function CannotCloseWindowWithoutParentError() {
	        return _super.call(this, TEST_RUN_ERRORS.cannotCloseWindowWithoutParent) || this;
	    }
	    return CannotCloseWindowWithoutParentError;
	}(TestRunErrorBase));
	var SwitchToWindowPredicateError = /** @class */ (function (_super) {
	    __extends(SwitchToWindowPredicateError, _super);
	    function SwitchToWindowPredicateError(errMsg) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.switchToWindowPredicateError) || this;
	        _this.errMsg = errMsg;
	        return _this;
	    }
	    return SwitchToWindowPredicateError;
	}(TestRunErrorBase));
	var WindowNotFoundError = /** @class */ (function (_super) {
	    __extends(WindowNotFoundError, _super);
	    function WindowNotFoundError() {
	        return _super.call(this, TEST_RUN_ERRORS.targetWindowNotFoundError) || this;
	    }
	    return WindowNotFoundError;
	}(TestRunErrorBase));
	var ParentWindowNotFoundError = /** @class */ (function (_super) {
	    __extends(ParentWindowNotFoundError, _super);
	    function ParentWindowNotFoundError() {
	        return _super.call(this, TEST_RUN_ERRORS.parentWindowNotFoundError) || this;
	    }
	    return ParentWindowNotFoundError;
	}(TestRunErrorBase));
	var PreviousWindowNotFoundError = /** @class */ (function (_super) {
	    __extends(PreviousWindowNotFoundError, _super);
	    function PreviousWindowNotFoundError() {
	        return _super.call(this, TEST_RUN_ERRORS.previousWindowNotFoundError) || this;
	    }
	    return PreviousWindowNotFoundError;
	}(TestRunErrorBase));
	var ChildWindowClosedBeforeSwitchingError = /** @class */ (function (_super) {
	    __extends(ChildWindowClosedBeforeSwitchingError, _super);
	    function ChildWindowClosedBeforeSwitchingError() {
	        return _super.call(this, TEST_RUN_ERRORS.childWindowClosedBeforeSwitchingError) || this;
	    }
	    return ChildWindowClosedBeforeSwitchingError;
	}(TestRunErrorBase));
	var CannotRestoreChildWindowError = /** @class */ (function (_super) {
	    __extends(CannotRestoreChildWindowError, _super);
	    function CannotRestoreChildWindowError() {
	        return _super.call(this, TEST_RUN_ERRORS.cannotRestoreChildWindowError) || this;
	    }
	    return CannotRestoreChildWindowError;
	}(TestRunErrorBase));
	var CurrentIframeNotFoundError = /** @class */ (function (_super) {
	    __extends(CurrentIframeNotFoundError, _super);
	    function CurrentIframeNotFoundError() {
	        return _super.call(this, TEST_RUN_ERRORS.currentIframeNotFoundError) || this;
	    }
	    return CurrentIframeNotFoundError;
	}(TestRunErrorBase));
	var CurrentIframeIsInvisibleError = /** @class */ (function (_super) {
	    __extends(CurrentIframeIsInvisibleError, _super);
	    function CurrentIframeIsInvisibleError() {
	        return _super.call(this, TEST_RUN_ERRORS.currentIframeIsInvisibleError) || this;
	    }
	    return CurrentIframeIsInvisibleError;
	}(TestRunErrorBase));
	// Native dialog errors
	//--------------------------------------------------------------------
	var NativeDialogNotHandledError = /** @class */ (function (_super) {
	    __extends(NativeDialogNotHandledError, _super);
	    function NativeDialogNotHandledError(dialogType, url) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.nativeDialogNotHandledError) || this;
	        _this.dialogType = dialogType;
	        _this.pageUrl = url;
	        return _this;
	    }
	    return NativeDialogNotHandledError;
	}(TestRunErrorBase));
	var UncaughtErrorInNativeDialogHandler = /** @class */ (function (_super) {
	    __extends(UncaughtErrorInNativeDialogHandler, _super);
	    function UncaughtErrorInNativeDialogHandler(dialogType, errMsg, url) {
	        var _this = _super.call(this, TEST_RUN_ERRORS.uncaughtErrorInNativeDialogHandler) || this;
	        _this.dialogType = dialogType;
	        _this.errMsg = errMsg;
	        _this.pageUrl = url;
	        return _this;
	    }
	    return UncaughtErrorInNativeDialogHandler;
	}(TestRunErrorBase));

	var identity = function (val) { return val; };
	function createReplicator(transforms) {
	    // NOTE: we will serialize replicator results
	    // to JSON with a command or command result.
	    // Therefore there is no need to do additional job here,
	    // so we use identity functions for serialization.
	    var replicator$1 = new replicator({
	        serialize: identity,
	        deserialize: identity
	    });
	    return replicator$1.addTransforms(transforms);
	}
	var FunctionTransform = /** @class */ (function () {
	    function FunctionTransform() {
	        this.type = 'Function';
	    }
	    FunctionTransform.prototype.shouldTransform = function (type) {
	        return type === 'function';
	    };
	    FunctionTransform.prototype.toSerializable = function () {
	        return '';
	    };
	    // HACK: UglifyJS + TypeScript + argument destructuring can generate incorrect code.
	    // So we have to use plain assignments here.
	    FunctionTransform.prototype.fromSerializable = function (opts) {
	        var fnCode = opts.fnCode;
	        var dependencies = opts.dependencies;
	        return evalFunction(fnCode, dependencies);
	    };
	    return FunctionTransform;
	}());
	var ClientFunctionNodeTransform = /** @class */ (function () {
	    function ClientFunctionNodeTransform(instantiationCallsiteName) {
	        this.type = 'Node';
	        this.instantiationCallsiteName = instantiationCallsiteName;
	    }
	    ClientFunctionNodeTransform.prototype.shouldTransform = function (type, val) {
	        if (val instanceof Node)
	            throw DomNodeClientFunctionResultError.name;
	        return false;
	    };
	    ClientFunctionNodeTransform.prototype.toSerializable = function () {
	    };
	    ClientFunctionNodeTransform.prototype.fromSerializable = function () {
	    };
	    return ClientFunctionNodeTransform;
	}());

	var ClientFunctionExecutor = /** @class */ (function () {
	    function ClientFunctionExecutor(command) {
	        this.command = command;
	        this.replicator = this._createReplicator();
	        this.dependencies = this.replicator.decode(this.command.dependencies);
	        this.fn = evalFunction(this.command.fnCode, this.dependencies);
	    }
	    ClientFunctionExecutor.prototype.getResult = function () {
	        var _this = this;
	        // eslint-disable-next-line hammerhead/use-hh-promise
	        return pinkie.resolve()
	            .then(function () {
	            var args = _this.replicator.decode(_this.command.args);
	            return _this._executeFn(args);
	        })
	            .then(function (result) { return _this.replicator.encode(result); });
	    };
	    ClientFunctionExecutor.prototype._createReplicator = function () {
	        return createReplicator([
	            new ClientFunctionNodeTransform(this.command.instantiationCallsiteName),
	            new FunctionTransform()
	        ]);
	    };
	    ClientFunctionExecutor.prototype._executeFn = function (args) {
	        return this.fn.apply(window, args);
	    };
	    return ClientFunctionExecutor;
	}());

	// eslint-disable-next-line no-restricted-globals
	Object.defineProperty(window, '%proxyless%', {
	    value: { ClientFunctionExecutor: ClientFunctionExecutor },
	    configurable: true
	});

}());
