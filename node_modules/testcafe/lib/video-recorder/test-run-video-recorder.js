"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = __importDefault(require("./process"));
const VIDEO_EXTENSION = 'mp4';
const TEMP_VIDEO_FILE_PREFIX = 'tmp-video';
const TEMP_MERGE_FILE_PREFIX = TEMP_VIDEO_FILE_PREFIX + '-merge';
const TEMP_MERGE_CONFIG_FILE_PREFIX = 'config';
const TEMP_MERGE_CONFIG_FILE_EXTENSION = 'txt';
class TestRunVideoRecorder {
    constructor({ testRun, test, index }, { path, ffmpegPath, encodingOptions }) {
        this.testRun = testRun;
        this.test = test;
        this.index = index;
        this.tempFiles = null;
        this.videoRecorder = null;
        this.path = path;
        this.ffmpegPath = ffmpegPath;
        this.encodingOptions = encodingOptions;
    }
    get testRunInfo() {
        return {
            testIndex: this.index,
            fixture: this.test.fixture.name,
            test: this.test.name,
            alias: this._connection.browserInfo.alias,
            parsedUserAgent: this._connection.browserInfo.parsedUserAgent
        };
    }
    get hasErrors() {
        return !!this.testRun.errs.length;
    }
    get _connection() {
        return this.testRun.browserConnection;
    }
    async startCapturing() {
        await this.videoRecorder.startCapturing();
    }
    async finishCapturing() {
        await this.videoRecorder.finishCapturing();
    }
    async init() {
        this.tempFiles = this._generateTempNames();
        this.videoRecorder = this._createVideoRecorderProcess();
        await this.videoRecorder.init();
    }
    async isVideoSupported() {
        const connectionCapabilities = await this._connection.provider.hasCustomActionForBrowser(this._connection.id);
        return connectionCapabilities && connectionCapabilities.hasGetVideoFrameData;
    }
    async isVideoEnabled() {
        return !this.test.skip;
    }
    _createVideoRecorderProcess() {
        return new process_1.default(this.tempFiles.tempVideoPath, this.ffmpegPath, this._connection, this.encodingOptions);
    }
    _generateTempNames() {
        const id = this._connection.id;
        const tempFileNames = {
            tempVideoPath: `${TEMP_VIDEO_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`,
            tempMergeConfigPath: `${TEMP_MERGE_CONFIG_FILE_PREFIX}-${id}.${TEMP_MERGE_CONFIG_FILE_EXTENSION}`,
            tmpMergeName: `${TEMP_MERGE_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`
        };
        for (const [tempFile, tempName] of Object.entries(tempFileNames))
            tempFileNames[tempFile] = path_1.join(this.path, tempName);
        return tempFileNames;
    }
}
exports.default = TestRunVideoRecorder;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tdmlkZW8tcmVjb3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmlkZW8tcmVjb3JkZXIvdGVzdC1ydW4tdmlkZW8tcmVjb3JkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBNEI7QUFDNUIsd0RBQTZDO0FBRTdDLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQztBQUU5QixNQUFNLHNCQUFzQixHQUFHLFdBQVcsQ0FBQztBQUMzQyxNQUFNLHNCQUFzQixHQUFHLHNCQUFzQixHQUFHLFFBQVEsQ0FBQztBQUVqRSxNQUFNLDZCQUE2QixHQUFNLFFBQVEsQ0FBQztBQUNsRCxNQUFNLGdDQUFnQyxHQUFHLEtBQUssQ0FBQztBQUUvQyxNQUFxQixvQkFBb0I7SUFDckMsWUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRTtRQUN4RSxJQUFJLENBQUMsT0FBTyxHQUFNLE9BQU8sQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFTLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFRLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsU0FBUyxHQUFPLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUUxQixJQUFJLENBQUMsSUFBSSxHQUFjLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFRLFVBQVUsQ0FBQztRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTztZQUNILFNBQVMsRUFBUSxJQUFJLENBQUMsS0FBSztZQUMzQixPQUFPLEVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtZQUN2QyxJQUFJLEVBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQy9CLEtBQUssRUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLO1lBQ25ELGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxlQUFlO1NBQ2hFLENBQUM7SUFDTixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDMUMsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjO1FBQ2hCLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWU7UUFDakIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSTtRQUNOLElBQUksQ0FBQyxTQUFTLEdBQU8sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztRQUV4RCxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELEtBQUssQ0FBQyxnQkFBZ0I7UUFDbEIsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFOUcsT0FBTyxzQkFBc0IsSUFBSSxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQztJQUNqRixDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCwyQkFBMkI7UUFDdkIsT0FBTyxJQUFJLGlCQUFvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0gsQ0FBQztJQUVELGtCQUFrQjtRQUNkLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1FBRS9CLE1BQU0sYUFBYSxHQUFHO1lBQ2xCLGFBQWEsRUFBUSxHQUFHLHNCQUFzQixJQUFJLEVBQUUsSUFBSSxlQUFlLEVBQUU7WUFDekUsbUJBQW1CLEVBQUUsR0FBRyw2QkFBNkIsSUFBSSxFQUFFLElBQUksZ0NBQWdDLEVBQUU7WUFDakcsWUFBWSxFQUFTLEdBQUcsc0JBQXNCLElBQUksRUFBRSxJQUFJLGVBQWUsRUFBRTtTQUM1RSxDQUFDO1FBRUYsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzVELGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV4RCxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUEzRUQsdUNBMkVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IFZpZGVvUmVjb3JkZXJQcm9jZXNzIGZyb20gJy4vcHJvY2Vzcyc7XG5cbmNvbnN0IFZJREVPX0VYVEVOU0lPTiA9ICdtcDQnO1xuXG5jb25zdCBURU1QX1ZJREVPX0ZJTEVfUFJFRklYID0gJ3RtcC12aWRlbyc7XG5jb25zdCBURU1QX01FUkdFX0ZJTEVfUFJFRklYID0gVEVNUF9WSURFT19GSUxFX1BSRUZJWCArICctbWVyZ2UnO1xuXG5jb25zdCBURU1QX01FUkdFX0NPTkZJR19GSUxFX1BSRUZJWCAgICA9ICdjb25maWcnO1xuY29uc3QgVEVNUF9NRVJHRV9DT05GSUdfRklMRV9FWFRFTlNJT04gPSAndHh0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJ1blZpZGVvUmVjb3JkZXIge1xuICAgIGNvbnN0cnVjdG9yICh7IHRlc3RSdW4sIHRlc3QsIGluZGV4IH0sIHsgcGF0aCwgZmZtcGVnUGF0aCwgZW5jb2RpbmdPcHRpb25zIH0pIHtcbiAgICAgICAgdGhpcy50ZXN0UnVuICAgID0gdGVzdFJ1bjtcbiAgICAgICAgdGhpcy50ZXN0ICAgICAgID0gdGVzdDtcbiAgICAgICAgdGhpcy5pbmRleCAgICAgID0gaW5kZXg7XG5cbiAgICAgICAgdGhpcy50ZW1wRmlsZXMgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb1JlY29yZGVyID0gbnVsbDtcblxuICAgICAgICB0aGlzLnBhdGggICAgICAgICAgICA9IHBhdGg7XG4gICAgICAgIHRoaXMuZmZtcGVnUGF0aCAgICAgID0gZmZtcGVnUGF0aDtcbiAgICAgICAgdGhpcy5lbmNvZGluZ09wdGlvbnMgPSBlbmNvZGluZ09wdGlvbnM7XG4gICAgfVxuXG4gICAgZ2V0IHRlc3RSdW5JbmZvICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRlc3RJbmRleDogICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgIGZpeHR1cmU6ICAgICAgICAgdGhpcy50ZXN0LmZpeHR1cmUubmFtZSxcbiAgICAgICAgICAgIHRlc3Q6ICAgICAgICAgICAgdGhpcy50ZXN0Lm5hbWUsXG4gICAgICAgICAgICBhbGlhczogICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uYnJvd3NlckluZm8uYWxpYXMsXG4gICAgICAgICAgICBwYXJzZWRVc2VyQWdlbnQ6IHRoaXMuX2Nvbm5lY3Rpb24uYnJvd3NlckluZm8ucGFyc2VkVXNlckFnZW50XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0IGhhc0Vycm9ycyAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMudGVzdFJ1bi5lcnJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQgX2Nvbm5lY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uO1xuICAgIH1cblxuICAgIGFzeW5jIHN0YXJ0Q2FwdHVyaW5nICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy52aWRlb1JlY29yZGVyLnN0YXJ0Q2FwdHVyaW5nKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZmluaXNoQ2FwdHVyaW5nICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy52aWRlb1JlY29yZGVyLmZpbmlzaENhcHR1cmluZygpO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQgKCkge1xuICAgICAgICB0aGlzLnRlbXBGaWxlcyAgICAgPSB0aGlzLl9nZW5lcmF0ZVRlbXBOYW1lcygpO1xuICAgICAgICB0aGlzLnZpZGVvUmVjb3JkZXIgPSB0aGlzLl9jcmVhdGVWaWRlb1JlY29yZGVyUHJvY2VzcygpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMudmlkZW9SZWNvcmRlci5pbml0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaXNWaWRlb1N1cHBvcnRlZCAoKSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25DYXBhYmlsaXRpZXMgPSBhd2FpdCB0aGlzLl9jb25uZWN0aW9uLnByb3ZpZGVyLmhhc0N1c3RvbUFjdGlvbkZvckJyb3dzZXIodGhpcy5fY29ubmVjdGlvbi5pZCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25DYXBhYmlsaXRpZXMgJiYgY29ubmVjdGlvbkNhcGFiaWxpdGllcy5oYXNHZXRWaWRlb0ZyYW1lRGF0YTtcbiAgICB9XG5cbiAgICBhc3luYyBpc1ZpZGVvRW5hYmxlZCAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy50ZXN0LnNraXA7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVZpZGVvUmVjb3JkZXJQcm9jZXNzICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWaWRlb1JlY29yZGVyUHJvY2Vzcyh0aGlzLnRlbXBGaWxlcy50ZW1wVmlkZW9QYXRoLCB0aGlzLmZmbXBlZ1BhdGgsIHRoaXMuX2Nvbm5lY3Rpb24sIHRoaXMuZW5jb2RpbmdPcHRpb25zKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVUZW1wTmFtZXMgKCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuX2Nvbm5lY3Rpb24uaWQ7XG5cbiAgICAgICAgY29uc3QgdGVtcEZpbGVOYW1lcyA9IHtcbiAgICAgICAgICAgIHRlbXBWaWRlb1BhdGg6ICAgICAgIGAke1RFTVBfVklERU9fRklMRV9QUkVGSVh9LSR7aWR9LiR7VklERU9fRVhURU5TSU9OfWAsXG4gICAgICAgICAgICB0ZW1wTWVyZ2VDb25maWdQYXRoOiBgJHtURU1QX01FUkdFX0NPTkZJR19GSUxFX1BSRUZJWH0tJHtpZH0uJHtURU1QX01FUkdFX0NPTkZJR19GSUxFX0VYVEVOU0lPTn1gLFxuICAgICAgICAgICAgdG1wTWVyZ2VOYW1lOiAgICAgICAgYCR7VEVNUF9NRVJHRV9GSUxFX1BSRUZJWH0tJHtpZH0uJHtWSURFT19FWFRFTlNJT059YFxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAoY29uc3QgW3RlbXBGaWxlLCB0ZW1wTmFtZV0gb2YgT2JqZWN0LmVudHJpZXModGVtcEZpbGVOYW1lcykpXG4gICAgICAgICAgICB0ZW1wRmlsZU5hbWVzW3RlbXBGaWxlXSA9IGpvaW4odGhpcy5wYXRoLCB0ZW1wTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIHRlbXBGaWxlTmFtZXM7XG4gICAgfVxufVxuIl19