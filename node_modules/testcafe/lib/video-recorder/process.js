"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const child_process_1 = require("child_process");
const lodash_1 = require("lodash");
const async_event_emitter_1 = __importDefault(require("../utils/async-event-emitter"));
const delay_1 = __importDefault(require("../utils/delay"));
const DEBUG_LOGGER_PREFIX = 'testcafe:video-recorder:process:';
const DEFAULT_OPTIONS = {
    // NOTE: don't ask confirmation for rewriting the output file
    'y': true,
    // NOTE: use the time when a frame is read from the source as its timestamp
    // IMPORTANT: must be specified before configuring the source
    'use_wallclock_as_timestamps': 1,
    // NOTE: use stdin as a source
    'i': 'pipe:0',
    // NOTE: use the H.264 video codec
    'c:v': 'libx264',
    // NOTE: use the 'ultrafast' compression preset
    'preset': 'ultrafast',
    // NOTE: use the yuv420p pixel format (the most widely supported)
    'pix_fmt': 'yuv420p',
    // NOTE: scale input frames to make the frame height divisible by 2 (yuv420p's requirement)
    'vf': 'scale=trunc(iw/2)*2:trunc(ih/2)*2',
    // NOTE: set the frame rate to 30 in the output video (the most widely supported)
    'r': 30
};
const FFMPEG_START_DELAY = 500;
class VideoRecorder extends async_event_emitter_1.default {
    constructor(basePath, ffmpegPath, connection, customOptions) {
        super();
        this.debugLogger = debug_1.default(DEBUG_LOGGER_PREFIX + connection.id);
        this.customOptions = customOptions;
        this.videoPath = basePath;
        this.connection = connection;
        this.ffmpegPath = ffmpegPath;
        this.ffmpegProcess = null;
        this.ffmpegStdoutBuf = '';
        this.ffmpegStderrBuf = '';
        this.ffmpegClosingPromise = null;
        this.disposed = false;
        this.closed = false;
        this.optionsList = this._getOptionsList();
        this.capturingPromise = null;
    }
    static _filterOption([key, value]) {
        if (value === true)
            return ['-' + key];
        return ['-' + key, value];
    }
    _setupFFMPEGBuffers() {
        this.ffmpegProcess.stdout.on('data', data => {
            this.ffmpegStdoutBuf += String(data);
        });
        this.ffmpegProcess.stderr.on('data', data => {
            this.ffmpegStderrBuf += String(data);
        });
    }
    _getChildProcessPromise() {
        return new Promise((resolve, reject) => {
            this.ffmpegProcess.on('exit', resolve);
            this.ffmpegProcess.on('error', reject);
        });
    }
    _getOptionsList() {
        const optionsObject = Object.assign({}, DEFAULT_OPTIONS, this.customOptions);
        const optionsList = lodash_1.flatten(Object.entries(optionsObject).map(VideoRecorder._filterOption));
        optionsList.push(this.videoPath);
        return optionsList;
    }
    get active() {
        return !this.closed && !this.disposed;
    }
    async _addFrame(frameData) {
        const writingFinished = this.ffmpegProcess.stdin.write(frameData);
        if (!writingFinished)
            await new Promise(r => this.ffmpegProcess.stdin.once('drain', r));
    }
    async _capture() {
        while (this.active) {
            try {
                const frame = await this.connection.provider.getVideoFrameData(this.connection.id);
                if (frame) {
                    await this.emit('frame');
                    await this._addFrame(frame);
                }
            }
            catch (error) {
                this.debugLogger(error);
            }
        }
    }
    async init() {
        this.ffmpegProcess = child_process_1.spawn(this.ffmpegPath, this.optionsList, { stdio: 'pipe' });
        this._setupFFMPEGBuffers();
        this.ffmpegClosingPromise = this
            ._getChildProcessPromise()
            .then(code => {
            this.closed = true;
            this.disposed = true;
            if (code) {
                this.debugLogger(code);
                this.debugLogger(this.ffmpegStdoutBuf);
                this.debugLogger(this.ffmpegStderrBuf);
            }
        })
            .catch(error => {
            this.closed = true;
            this.disposed = true;
            this.debugLogger(error);
            this.debugLogger(this.ffmpegStdoutBuf);
            this.debugLogger(this.ffmpegStderrBuf);
        });
        await delay_1.default(FFMPEG_START_DELAY);
    }
    async dispose() {
        if (this.disposed)
            return;
        this.disposed = true;
        this.ffmpegProcess.stdin.end();
        await this.ffmpegClosingPromise;
    }
    async startCapturing() {
        this.capturingPromise = this._capture();
        await this.once('frame');
    }
    async finishCapturing() {
        if (this.closed)
            return;
        this.closed = true;
        await this.capturingPromise;
        await this.dispose();
    }
}
exports.default = VideoRecorder;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,