"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.delegateAPI = exports.getDelegatedAPIList = void 0;
const API_IMPLEMENTATION_METHOD_RE = /^_(\S+)\$(getter|setter)?$/;
function getDelegatedAPIList(src) {
    return Object
        .getOwnPropertyNames(src)
        .map(prop => {
        const match = prop.match(API_IMPLEMENTATION_METHOD_RE);
        if (match) {
            return {
                srcProp: prop,
                apiProp: match[1],
                accessor: match[2]
            };
        }
        return null;
    })
        .filter(item => !!item);
}
exports.getDelegatedAPIList = getDelegatedAPIList;
function delegateAPI(dest, apiList, opts) {
    apiList.forEach(({ srcProp, apiProp, accessor }) => {
        let fn = function (...args) {
            if (opts.proxyMethod)
                opts.proxyMethod();
            let handler = null;
            if (opts.useCurrentCtxAsHandler)
                handler = this;
            else if (opts.getHandler)
                handler = opts.getHandler(apiProp, accessor);
            else
                handler = opts.handler;
            return handler[srcProp](...args);
        };
        // NOTE: need to create named function to process possible err.stack correctly
        const createNamedFunction = new Function('srcProp', 'apiProp', 'accessor', 'opts', `
            return ${fn.toString().replace('function', 'function ' + apiProp)}
        `);
        fn = createNamedFunction(srcProp, apiProp, accessor, opts);
        if (accessor === 'getter')
            Object.defineProperty(dest, apiProp, { get: fn, configurable: true });
        else if (accessor === 'setter')
            Object.defineProperty(dest, apiProp, { set: fn, configurable: true });
        else {
            // NOTE: need to create `property` but not a `function` to stop on `debugger`
            // before the action is called
            Object.defineProperty(dest, apiProp, {
                get() {
                    if (this.shouldStop && this.shouldStop(apiProp)) {
                        // eslint-disable-next-line no-debugger
                        debugger;
                    }
                    return fn;
                },
                configurable: true
            });
        }
    });
}
exports.delegateAPI = delegateAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZWdhdGVkLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWxlZ2F0ZWQtYXBpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sNEJBQTRCLEdBQUcsNEJBQTRCLENBQUM7QUFFbEUsU0FBZ0IsbUJBQW1CLENBQUUsR0FBRztJQUNwQyxPQUFPLE1BQU07U0FDUixtQkFBbUIsQ0FBQyxHQUFHLENBQUM7U0FDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRXZELElBQUksS0FBSyxFQUFFO1lBQ1AsT0FBTztnQkFDSCxPQUFPLEVBQUcsSUFBSTtnQkFDZCxPQUFPLEVBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDckIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDO1NBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFqQkQsa0RBaUJDO0FBRUQsU0FBZ0IsV0FBVyxDQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSTtJQUM1QyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7UUFDL0MsSUFBSSxFQUFFLEdBQUcsVUFBVSxHQUFHLElBQUk7WUFDdEIsSUFBSSxJQUFJLENBQUMsV0FBVztnQkFDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRXZCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztZQUVuQixJQUFJLElBQUksQ0FBQyxzQkFBc0I7Z0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBRWQsSUFBSSxJQUFJLENBQUMsVUFBVTtnQkFDcEIsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDOztnQkFHN0MsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFM0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUM7UUFFRiw4RUFBOEU7UUFDOUUsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7cUJBQ3RFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFdBQVcsR0FBRyxPQUFPLENBQUM7U0FDcEUsQ0FBQyxDQUFDO1FBRUgsRUFBRSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNELElBQUksUUFBUSxLQUFLLFFBQVE7WUFDckIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUVyRSxJQUFJLFFBQVEsS0FBSyxRQUFRO1lBQzFCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7YUFFckU7WUFDRCw2RUFBNkU7WUFDN0UsOEJBQThCO1lBQzlCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtnQkFDakMsR0FBRztvQkFDQyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTt3QkFDN0MsdUNBQXVDO3dCQUN2QyxRQUFRLENBQUM7cUJBQ1o7b0JBRUQsT0FBTyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQztnQkFDRCxZQUFZLEVBQUUsSUFBSTthQUNyQixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWpERCxrQ0FpREMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBUElfSU1QTEVNRU5UQVRJT05fTUVUSE9EX1JFID0gL15fKFxcUyspXFwkKGdldHRlcnxzZXR0ZXIpPyQvO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVsZWdhdGVkQVBJTGlzdCAoc3JjKSB7XG4gICAgcmV0dXJuIE9iamVjdFxuICAgICAgICAuZ2V0T3duUHJvcGVydHlOYW1lcyhzcmMpXG4gICAgICAgIC5tYXAocHJvcCA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHByb3AubWF0Y2goQVBJX0lNUExFTUVOVEFUSU9OX01FVEhPRF9SRSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNyY1Byb3A6ICBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBhcGlQcm9wOiAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBtYXRjaFsyXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlQVBJIChkZXN0LCBhcGlMaXN0LCBvcHRzKSB7XG4gICAgYXBpTGlzdC5mb3JFYWNoKCh7IHNyY1Byb3AsIGFwaVByb3AsIGFjY2Vzc29yIH0pID0+IHtcbiAgICAgICAgbGV0IGZuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnByb3h5TWV0aG9kKVxuICAgICAgICAgICAgICAgIG9wdHMucHJveHlNZXRob2QoKTtcblxuICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAob3B0cy51c2VDdXJyZW50Q3R4QXNIYW5kbGVyKVxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzO1xuXG4gICAgICAgICAgICBlbHNlIGlmIChvcHRzLmdldEhhbmRsZXIpXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IG9wdHMuZ2V0SGFuZGxlcihhcGlQcm9wLCBhY2Nlc3Nvcik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gb3B0cy5oYW5kbGVyO1xuXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcltzcmNQcm9wXSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBOT1RFOiBuZWVkIHRvIGNyZWF0ZSBuYW1lZCBmdW5jdGlvbiB0byBwcm9jZXNzIHBvc3NpYmxlIGVyci5zdGFjayBjb3JyZWN0bHlcbiAgICAgICAgY29uc3QgY3JlYXRlTmFtZWRGdW5jdGlvbiA9IG5ldyBGdW5jdGlvbignc3JjUHJvcCcsICdhcGlQcm9wJywgJ2FjY2Vzc29yJywgJ29wdHMnLCBgXG4gICAgICAgICAgICByZXR1cm4gJHtmbi50b1N0cmluZygpLnJlcGxhY2UoJ2Z1bmN0aW9uJywgJ2Z1bmN0aW9uICcgKyBhcGlQcm9wKX1cbiAgICAgICAgYCk7XG5cbiAgICAgICAgZm4gPSBjcmVhdGVOYW1lZEZ1bmN0aW9uKHNyY1Byb3AsIGFwaVByb3AsIGFjY2Vzc29yLCBvcHRzKTtcblxuICAgICAgICBpZiAoYWNjZXNzb3IgPT09ICdnZXR0ZXInKVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGFwaVByb3AsIHsgZ2V0OiBmbiwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIGVsc2UgaWYgKGFjY2Vzc29yID09PSAnc2V0dGVyJylcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBhcGlQcm9wLCB7IHNldDogZm4sIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IG5lZWQgdG8gY3JlYXRlIGBwcm9wZXJ0eWAgYnV0IG5vdCBhIGBmdW5jdGlvbmAgdG8gc3RvcCBvbiBgZGVidWdnZXJgXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIGFjdGlvbiBpcyBjYWxsZWRcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBhcGlQcm9wLCB7XG4gICAgICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkU3RvcCAmJiB0aGlzLnNob3VsZFN0b3AoYXBpUHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=