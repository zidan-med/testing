"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const phase_1 = __importDefault(require("./phase"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const marker_symbol_1 = __importDefault(require("./marker-symbol"));
const nanoid_1 = __importDefault(require("nanoid"));
class Role extends events_1.EventEmitter {
    constructor(loginUrl, initFn, options = {}) {
        super();
        this[marker_symbol_1.default] = true;
        this.id = nanoid_1.default(7);
        this.phase = loginUrl ? phase_1.default.uninitialized : phase_1.default.initialized;
        this.loginUrl = loginUrl;
        this._initFn = initFn;
        this.opts = options;
        this.redirectUrl = null;
        this.stateSnapshot = testcafe_hammerhead_1.StateSnapshot.empty();
        this.initErr = null;
    }
    async _storeStateSnapshot(testRun) {
        if (this.initErr)
            return;
        this.stateSnapshot = await testRun.getStateSnapshot();
    }
    async _executeInitFn(testRun) {
        try {
            let fn = () => this._initFn(testRun);
            fn = testRun.decoratePreventEmitActionEvents(fn, { prevent: false });
            fn = testRun.decorateDisableDebugBreakpoints(fn, { disable: false });
            await fn();
        }
        catch (err) {
            this.initErr = err;
        }
    }
    async initialize(testRun) {
        this.phase = phase_1.default.pendingInitialization;
        await testRun.switchToCleanRun(this.loginUrl);
        await this._executeInitFn(testRun);
        await this._storeStateSnapshot(testRun);
        if (this.opts.preserveUrl)
            await this.setCurrentUrlAsRedirectUrl(testRun);
        this.phase = phase_1.default.initialized;
        this.emit('initialized');
    }
    async setCurrentUrlAsRedirectUrl(testRun) {
        this.redirectUrl = await testRun.getCurrentUrl();
    }
}
exports.default = Role;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb2xlL3JvbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBc0M7QUFDdEMsb0RBQWdDO0FBQ2hDLDZEQUFvRDtBQUNwRCxvRUFBeUM7QUFDekMsb0RBQTRCO0FBSzVCLE1BQXFCLElBQUssU0FBUSxxQkFBWTtJQVcxQyxZQUFvQixRQUF1QixFQUFFLE1BQXVCLEVBQUUsT0FBTyxHQUFHLEVBQUU7UUFDOUUsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsdUJBQVUsQ0FBQyxHQUFLLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsRUFBRSxHQUFjLGdCQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBVyxRQUFRLENBQUMsQ0FBQyxDQUFDLGVBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGVBQVMsQ0FBQyxXQUFXLENBQUM7UUFDaEYsSUFBSSxDQUFDLFFBQVEsR0FBUSxRQUFRLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBUyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBWSxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBSyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxtQ0FBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQVMsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFTyxLQUFLLENBQUMsbUJBQW1CLENBQUUsT0FBK0I7UUFDOUQsSUFBSSxJQUFJLENBQUMsT0FBTztZQUNaLE9BQU87UUFFWCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVPLEtBQUssQ0FBQyxjQUFjLENBQUUsT0FBK0I7UUFDekQsSUFBSTtZQUNBLElBQUksRUFBRSxHQUFHLEdBQWtCLEVBQUUsQ0FBRSxJQUFJLENBQUMsT0FBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVsRSxFQUFFLEdBQUcsT0FBTyxDQUFDLCtCQUErQixDQUFDLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3JFLEVBQUUsR0FBRyxPQUFPLENBQUMsK0JBQStCLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFFckUsTUFBTSxFQUFFLEVBQUUsQ0FBQztTQUNkO1FBQ0QsT0FBTyxHQUFHLEVBQUU7WUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztTQUN0QjtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFFLE9BQStCO1FBQ3BELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBUyxDQUFDLHFCQUFxQixDQUFDO1FBRTdDLE1BQU0sT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFrQixDQUFDLENBQUM7UUFFeEQsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQ3JCLE1BQU0sSUFBSSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5ELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBUyxDQUFDLFdBQVcsQ0FBQztRQUVuQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxLQUFLLENBQUMsMEJBQTBCLENBQUUsT0FBK0I7UUFDcEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0NBQ0o7QUFqRUQsdUJBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCBSb2xlUGhhc2UgZnJvbSAnLi9waGFzZSc7XG5pbXBvcnQgeyBTdGF0ZVNuYXBzaG90IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgcm9sZU1hcmtlciBmcm9tICcuL21hcmtlci1zeW1ib2wnO1xuaW1wb3J0IG5hbm9pZCBmcm9tICduYW5vaWQnO1xuaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vdGVzdC1ydW4nO1xuaW1wb3J0IFRlc3RSdW5Qcm94eSBmcm9tICcuLi9zZXJ2aWNlcy9jb21waWxlci90ZXN0LXJ1bi1wcm94eSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9sZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHBoYXNlOiBSb2xlUGhhc2U7XG4gICAgcHVibGljIGxvZ2luVXJsOiBzdHJpbmcgfCBudWxsO1xuICAgIHB1YmxpYyByZWRpcmVjdFVybDogc3RyaW5nIHwgbnVsbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pbml0Rm46IEZ1bmN0aW9uIHwgbnVsbDtcbiAgICBwdWJsaWMgb3B0czogUm9sZU9wdGlvbnM7XG4gICAgcHVibGljIGluaXRFcnI6IG51bGwgfCBFcnJvcjtcbiAgICBwdWJsaWMgc3RhdGVTbmFwc2hvdDogU3RhdGVTbmFwc2hvdDtcbiAgICBwcml2YXRlIFtyb2xlTWFya2VyXTogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobG9naW5Vcmw6IHN0cmluZyB8IG51bGwsIGluaXRGbjogRnVuY3Rpb24gfCBudWxsLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzW3JvbGVNYXJrZXJdICAgPSB0cnVlO1xuICAgICAgICB0aGlzLmlkICAgICAgICAgICAgPSBuYW5vaWQoNyk7XG4gICAgICAgIHRoaXMucGhhc2UgICAgICAgICA9IGxvZ2luVXJsID8gUm9sZVBoYXNlLnVuaW5pdGlhbGl6ZWQgOiBSb2xlUGhhc2UuaW5pdGlhbGl6ZWQ7XG4gICAgICAgIHRoaXMubG9naW5VcmwgICAgICA9IGxvZ2luVXJsO1xuICAgICAgICB0aGlzLl9pbml0Rm4gICAgICAgPSBpbml0Rm47XG4gICAgICAgIHRoaXMub3B0cyAgICAgICAgICA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMucmVkaXJlY3RVcmwgICA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGVTbmFwc2hvdCA9IFN0YXRlU25hcHNob3QuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5pbml0RXJyICAgICAgID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIF9zdG9yZVN0YXRlU25hcHNob3QgKHRlc3RSdW46IFRlc3RSdW4gfCBUZXN0UnVuUHJveHkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdEVycilcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0aGlzLnN0YXRlU25hcHNob3QgPSBhd2FpdCB0ZXN0UnVuLmdldFN0YXRlU25hcHNob3QoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIF9leGVjdXRlSW5pdEZuICh0ZXN0UnVuOiBUZXN0UnVuIHwgVGVzdFJ1blByb3h5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZm4gPSAoKTogUHJvbWlzZTx2b2lkPiA9PiAodGhpcy5faW5pdEZuIGFzIEZ1bmN0aW9uKSh0ZXN0UnVuKTtcblxuICAgICAgICAgICAgZm4gPSB0ZXN0UnVuLmRlY29yYXRlUHJldmVudEVtaXRBY3Rpb25FdmVudHMoZm4sIHsgcHJldmVudDogZmFsc2UgfSk7XG4gICAgICAgICAgICBmbiA9IHRlc3RSdW4uZGVjb3JhdGVEaXNhYmxlRGVidWdCcmVha3BvaW50cyhmbiwgeyBkaXNhYmxlOiBmYWxzZSB9KTtcblxuICAgICAgICAgICAgYXdhaXQgZm4oKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRFcnIgPSBlcnI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdGlhbGl6ZSAodGVzdFJ1bjogVGVzdFJ1biB8IFRlc3RSdW5Qcm94eSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLnBoYXNlID0gUm9sZVBoYXNlLnBlbmRpbmdJbml0aWFsaXphdGlvbjtcblxuICAgICAgICBhd2FpdCB0ZXN0UnVuLnN3aXRjaFRvQ2xlYW5SdW4odGhpcy5sb2dpblVybCBhcyBzdHJpbmcpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuX2V4ZWN1dGVJbml0Rm4odGVzdFJ1bik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3N0b3JlU3RhdGVTbmFwc2hvdCh0ZXN0UnVuKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRzLnByZXNlcnZlVXJsKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRDdXJyZW50VXJsQXNSZWRpcmVjdFVybCh0ZXN0UnVuKTtcblxuICAgICAgICB0aGlzLnBoYXNlID0gUm9sZVBoYXNlLmluaXRpYWxpemVkO1xuXG4gICAgICAgIHRoaXMuZW1pdCgnaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2V0Q3VycmVudFVybEFzUmVkaXJlY3RVcmwgKHRlc3RSdW46IFRlc3RSdW4gfCBUZXN0UnVuUHJveHkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5yZWRpcmVjdFVybCA9IGF3YWl0IHRlc3RSdW4uZ2V0Q3VycmVudFVybCgpO1xuICAgIH1cbn1cbiJdfQ==